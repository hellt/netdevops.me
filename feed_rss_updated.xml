<?xml version="1.0" encoding="UTF-8" ?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"> <channel><title>Applying DevOps to networks</title><description>Applying DevOps to networks.</description><link>https://netdevops.me/</link><atom:link href="https://netdevops.me/feed_rss_updated.xml" rel="self" type="application/rss+xml" /><managingEditor>Roman Dodin</managingEditor><docs>https://github.com/hellt/netdevops.me</docs><language>en</language> <pubDate>Tue, 15 Aug 2023 10:35:23 -0000</pubDate> <lastBuildDate>Tue, 15 Aug 2023 10:35:23 -0000</lastBuildDate> <ttl>1440</ttl> <generator>MkDocs RSS plugin - v1.5.0</generator> <item> <title>Flask application in a production-ready container</title> <author>rdodin</author> <category>docker</category> <category>flask</category> <category>nginx</category> <category>uwsgi</category> <description>&lt;h1&gt;Flask application in a production-ready container&lt;/h1&gt;&lt;p&gt;Flask documentation &lt;a href=&#34;https://flask.palletsprojects.com/en/2.3.x/tutorial/deploy/#run-with-a-production-server&#34;&gt;is very clear&lt;/a&gt; on where is the place for its built-in WSGI application server:&lt;/p&gt;&lt;p&gt;!!!note When running publicly rather than in development, you should not use the built-in development server (flask run). The development server is provided by Werkzeug for convenience, but is not designed to be particularly efficient, stable, or secure.&lt;/p&gt;&lt;p&gt;So how about I share with you a &lt;a href=&#34;https://github.com/hellt/nginx-uwsgi-flask-alpine-docker&#34;&gt;&lt;em&gt;Dockerfile&lt;/em&gt;&lt;/a&gt; that will enable your Flask application to run &lt;strong&gt;properly&lt;/strong&gt; and ready for production-like deployments? As a bonus, I will share my findings discovered along the way of building this container image.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;nginx-uwsgi-flaks-alpine-docker&#34; src=&#34;https://gitlab.com/rdodin/netdevops.me/uploads/e893ab9ea824ed501170908377d3fb52/image.png&#34;&gt;&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;But before we dive in and start throwing words like uwsgi, nginx and sockets lets set up our vocabulary. As DigitalOcean originally wrote:&lt;/p&gt;&lt;blockquote&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://www.python.org/dev/peps/pep-3333/&#34;&gt;&lt;strong&gt;WSGI&lt;/strong&gt;&lt;/a&gt;: A Python spec that defines a standard interface for communication between an application or framework and an application/web server. This was created in order to simplify and standardize communication between these components for consistency and interchangeability. This basically defines an API interface that can be used over other protocols.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://uwsgi-docs.readthedocs.io/en/latest/&#34;&gt;&lt;strong&gt;uWSGI&lt;/strong&gt;&lt;/a&gt;: An application server container that aims to provide a full stack for developing and deploying web applications and services. The main component is an application server that can handle apps of different languages. It communicates with the application using the methods defined by the WSGI spec, and with other web servers over a variety of other protocols. This is the piece that translates requests from a conventional web server into a format that the application can process.&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://uwsgi-docs.readthedocs.io/en/latest/Protocol.html&#34;&gt;&lt;strong&gt;uwsgi&lt;/strong&gt;&lt;/a&gt;: A fast, binary protocol implemented by the uWSGI server to communicate with a more full-featured web server. This is a wire protocol, not a transport protocol. It is the preferred way to speak to web servers that are proxying requests to uWSGI.&lt;/li&gt;&lt;/ul&gt;&lt;/blockquote&gt;&lt;h2&gt;Why do we even need nginx and uWSGI in front of Flask?&lt;/h2&gt;&lt;p&gt;That is the question everyone should ask. Main reason is performance, of course. The Flasks built-in web server is a development server by &lt;a href=&#34;https://werkzeug.palletsprojects.com/&#34;&gt;Werkzeug&lt;/a&gt; which was not designed to be particularly efficient, stable, or secure.&lt;br&gt;And by all means Werkzeug was not optimized to serve static content, that is why production deployments of Flask apps rely on the following stack:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;strong&gt;Front-end web-server&lt;/strong&gt; (nginx or Apache): load balancing, SSL termination, rate limiting, HTTP parsing and serving static content.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;WSGI application server&lt;/strong&gt; (uWSGI, Gunicorn, CherryPy): runs WSGI compliant web applications and does it in a production-grade manner. Handling concurrent requests, process management, cluster membership, logging, configuration, shared memory, etc.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Obviously, development server which comes with Flask simply does not bother about all these tasks that production deployments face. That is why it is so strongly advised against using Flask&#39; server in any kind of production.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Speaking about the performance I suggest to check out this presentation from Pycon IE &#39;13 called &lt;a href=&#34;http://brianmcdonnell.github.io/pycon_ie_2013/#/&#34;&gt;&lt;em&gt;Maximum Throughput (baseline costs of web frameworks)&lt;/em&gt;&lt;/a&gt; that explains how number of queries per second depends on web stack you choose.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;While there are many alternatives to &lt;a href=&#34;https://nginx.ru/en/&#34;&gt;&lt;code&gt;nginx&lt;/code&gt;&lt;/a&gt;+&lt;a href=&#34;https://uwsgi-docs.readthedocs.io/en/latest/&#34;&gt;&lt;code&gt;uWSGI&lt;/code&gt;&lt;/a&gt; pair, I will focus on these two in this post.&lt;/p&gt;&lt;h2&gt;Do I need a &lt;em&gt;production grade&lt;/em&gt; Flask app for a pet project?&lt;/h2&gt;&lt;p&gt;While you may go with built-in Flask server for the little projects of your own, this container is so simple that you would not need to use the Built-in server anymore. Why opting out for testing server, if it is easy to launch it in a production-ready way?&lt;/p&gt;&lt;h2&gt;Configuring nginx&lt;/h2&gt;&lt;p&gt;We start with configuration of &lt;code&gt;nginx&lt;/code&gt; server that will face incoming traffic and handle it for us.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;We also keep in mind that our nginx server will run in an Alpine Linux docker container.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;nginx config consists of two parts:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;global nginx config file (&lt;a href=&#34;https://github.com/hellt/nginx-uwsgi-flask-alpine-docker/blob/master/python2/nginx.conf&#34;&gt;&lt;code&gt;nginx.conf&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;site-specific config file (&lt;a href=&#34;https://github.com/hellt/nginx-uwsgi-flask-alpine-docker/blob/master/python2/flask-site-nginx.conf&#34;&gt;&lt;code&gt;flask-site-nginx.conf&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;nginx global config&lt;/h3&gt;&lt;p&gt;For the &lt;strong&gt;global nginx config file&lt;/strong&gt; I combined the recommendations gathered online with &lt;a href=&#34;https://uwsgi-docs.readthedocs.io/en/latest/Nginx.html&#34;&gt;nginx configuration samples&lt;/a&gt; from uWSGI docs.&lt;/p&gt;&lt;p&gt;A little...&lt;/p&gt;</description><link>https://netdevops.me/2017/flask-application-in-a-production-ready-container/</link> <pubDate>Tue, 15 Aug 2023 10:27:14 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2017/flask-application-in-a-production-ready-container/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2017/flask-application-in-a-production-ready-container/</guid> </item> <item> <title>SR OS Rootifier or how to flatten 7750 SR config</title> <author>rdodin</author> <category>nokia</category> <category>sr os</category> <description>&lt;h1&gt;SR OS Rootifier or how to flatten 7750 SR config&lt;/h1&gt;&lt;p&gt;Back in the days when I mostly did routing stuff I spent the whole day configuring SROS devices via SSH. And once in a while I saw that SSH session or its server part (or even underlying connection) glitched, resulting in a corrupted lines feeded to the device.&lt;/p&gt;&lt;p&gt;What was also quite common is to make a mistake (i.e. syntax one) in a single line and watch like the rest of config got applied to the wrong context.&lt;/p&gt;&lt;p&gt;These sad facts pushed me to create a &lt;strong&gt;rootifier&lt;/strong&gt; CLI script, that was converting tree-like SROS config into flattented (aka rooted) fashion.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;rootifier&#34; src=&#34;https://gitlab.com/rdodin/netdevops.me/uploads/29184e488b07d8b5efb77d367a9e41ce/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;!!!note &#34;update 2023&#34; The web service that was available publicly but has been now decommissioned due to the transition to MD-CLI.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;SROS config structure&lt;/h2&gt;&lt;p&gt;As you well aware, SROS config is of indent-based tree-like structure:&lt;/p&gt;&lt;p&gt;```bashconfigure&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;echo &#34;System Configuration&#34;&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;system name &#34;ntdvps&#34; location &#34;netdevops.me&#34; chassis-mode d&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;It is readable for a human, but it is much safer to apply batch config using the flattened structure, where each command is given in a full context fashion. Passed through a rootifier our example will transform as displayed:&lt;/p&gt;&lt;p&gt;&lt;code&gt;/configure system name &#34;ntdvps&#34;/configure system location &#34;netdevops.me&#34;/configure system chassis-mode d&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Now each command has a full path applied and even making an error in a single command will not affect the rest of them, making &lt;strong&gt;configuration safer&lt;/strong&gt;.&lt;/p&gt;&lt;p&gt;Yeah, probably applying rootifier to a short config snippets make a little sense, but pushing a solid 300+ lines config to a fresh box would definitely benefit from rootifying.&lt;/p&gt;&lt;p&gt;Take a look &lt;a href=&#34;https://www.diffchecker.com/dHwUDWUw&#34;&gt;at this diff&lt;/a&gt; made for a real-life config of SROS box before and after rootifying. Not only &lt;strong&gt;it downsized from 1600 lines to 600&lt;/strong&gt;, it also &lt;strong&gt;became safer&lt;/strong&gt; to push via console/SSH connection.&lt;/p&gt;&lt;h2&gt;Usage scenarios and limitations&lt;/h2&gt;&lt;p&gt;As I explain in the &lt;em&gt;Usage and Limitations&lt;/em&gt; section rootifier accepts&lt;/p&gt;&lt;ul&gt;&lt;li&gt;either the whole config file content&lt;/li&gt;&lt;li&gt;or any part of it, that starts under &lt;code&gt;configure&lt;/code&gt; section&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;For instance, valid config portions are:&lt;/p&gt;&lt;p&gt;&lt;strong&gt;1. Full config&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;As you see it via &lt;code&gt;admin display-config&lt;/code&gt; or in the config file you can copy it it as a whole, or from the beginning to the desired portion&lt;/p&gt;&lt;p&gt;```&lt;/p&gt;&lt;h1&gt;TiMOS-B-14.0.R4 both/x86_64 Nokia 7750 SR Copyright (c) 2000-2016 Nokia.&lt;/h1&gt;&lt;h1&gt;All rights reserved. All use subject to applicable license agreements.&lt;/h1&gt;&lt;h1&gt;Built on Thu Jul 28 17:26:11 PDT 2016 by builder in /rel14.0/b1/R4/panos/main&lt;/h1&gt;&lt;h1&gt;Generated WED NOV 22 12:22:35 2017 UTC&lt;/h1&gt;&lt;p&gt;exit allconfigure&lt;/p&gt;&lt;h1&gt;--------------------------------------------------&lt;/h1&gt;&lt;p&gt;echo &#34;System Configuration&#34;&lt;/p&gt;&lt;h1&gt;--------------------------------------------------&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;system name &#34;pe.pod62.cats&#34; chassis-mode d dns exit snmp exit time ntp server 10.167.55.2 no shutdown exit sntp shutdown exit dst-zone CEST start last sunday march 02:00 end last sunday october 03:00 exit zone UTC exit&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;&lt;strong&gt;2. Portion of the config that starts with 4 spaces exactly&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;system name &#34;pe.pod62.cats&#34; chassis-mode d dns exit snmp exit time ntp server 10.167.55.2 no shutdown exit&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;3. Any part of the config with specified context&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Since rootifier does not know the config structure and makes decision only by indentations in the passed config, it can not say what context was this snippet from:&lt;/p&gt;&lt;p&gt;```&lt;/p&gt;&lt;h1&gt;--------------------------------------------------&lt;/h1&gt;&lt;p&gt;echo &#34;Policy Configuration&#34;&lt;/p&gt;&lt;h1&gt;--------------------------------------------------&lt;/h1&gt;&lt;pre&gt;&lt;code&gt; policy-options begin prefix-list &#34;loopback&#34; prefix 1.1.1.1/32 exact exit policy-statement &#34;export_loopback&#34; entry 10 from prefix-list &#34;loopback&#34; exit action accept exit exit exit commit exit&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;Thus, rootifier will not render the rooted version of this snippet correctly.&lt;/p&gt;&lt;p&gt;Now we, of course, know that policies are configured under the &lt;code&gt;/configure router&lt;/code&gt; context, so we can help rootifier by setting the context:&lt;/p&gt;&lt;p&gt;``` # put a missing context before your snippet router policy-options begin prefix-list &#34;loopback&#34; prefix 1.1.1.1/32 exact exit policy-statement &#34;export_loopback&#34; entry 10 ...&lt;/p&gt;</description><link>https://netdevops.me/2017/sr-os-rootifier-or-how-to-flatten-7750-sr-config/</link> <pubDate>Tue, 15 Aug 2023 10:27:14 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2017/sr-os-rootifier-or-how-to-flatten-7750-sr-config/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2017/sr-os-rootifier-or-how-to-flatten-7750-sr-config/</guid> </item> <item> <title>gNMIc joins Openconfig 🚀</title> <author>rdodin</author> <category>gnmi</category> <category>gnmic</category> <category>openconfig</category> <description>&lt;h1&gt;gNMIc joins Openconfig 🚀&lt;/h1&gt;&lt;p&gt;Two years ago, a dozen contributors less, 400 Pull Requests, and 2000 commits behind, another pet project appeared on a vast GitHub landscape. It was a learning exercise by [Karim Radhouani][karim-github] to sharpen his skills in [gNMI][gnmi-ref] - a niche network management protocol promoted by the [Openconfig][oc] group.&lt;/p&gt;&lt;p&gt;Initially named &lt;code&gt;gnmi_client&lt;/code&gt;, it had a noble but narrow scope of providing a feature-rich, complete, yet intuitive CLI for gNMI-enabled routers. Fast forward two years, and we have the [&lt;strong&gt;gNMIc&lt;/strong&gt;][gnmic-main-site] software suite that &lt;strong&gt;is much more than just a CLI&lt;/strong&gt; for gNMI.&lt;/p&gt;&lt;div class=&#34;img-shadow&#34;&gt;&lt;video width=&#34;100%&#34; autoplay muted loop controls&gt;&lt;source src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/d3a08c2f03c2d15db2074967e4ef268f/gnmic-oc.mp4&#34; type=&#34;video/mp4&#34;&gt;&lt;/video&gt;&lt;/div&gt;&lt;p&gt;Today, Nokia donates the gNMIc project to Openconfig, and with that move, we expect to see gNMIc adopted by even more companies and organizations :partying_face:&lt;/p&gt;&lt;div class=&#34;grid cards&#34; markdown&gt;- :material-home:{ .lg .middle } **gNMIc new address** --- :material-github: [openconfig/gnmic][gnmic-repo] :material-book: [https://gnmic.openconfig.net][gnmic-main-site]&lt;/div&gt;&lt;p&gt;In this post I&#39;d like to give you a brief overview of gNMIc&#39;s core features and share my thoughts on what we expect to happen with gNMIc moving under the Openconfig&#39;s wing.&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;Over the past two years, gNMIc became a feature-rich gNMI-focused software suite. Both its CLI and collection capabilities matured with lots of new integrations added. Moreover, gNMIc had quite some air time in production networks, not to mention lab deployments and dev testbeds.&lt;/p&gt;&lt;p&gt;I would like to briefly highlight gNMIc&#39;s current feature set for those who aren&#39;t familiar with it yet. Broadly, we split gNMIc capabilities into the following three domains:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;CLI&lt;/li&gt;&lt;li&gt;Collector&lt;/li&gt;&lt;li&gt;API&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;!!!note Each of those domain areas packs a hefty number of neat features, and I will only highlight some of them to keep the introduction short and sweet.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;gNMIc cherishes documentation; readers are encouraged to follow the links provided in this post to get more information on particular topics.&lt;/code&gt;&lt;/pre&gt;&lt;p markdown align=center&gt;![logo](https://gitlab.com/rdodin/pics/-/wikis/uploads/46e7d1631bd5569e9bf289be9dfa3812/gnmic-headline.svg?sanitize=true#only-light)![logo](https://gitlab.com/rdodin/pics/-/wikis/uploads/f54d2cfdde13193cedab7b60203a2a9a/gnmic-headline-for-dark-bg.svg?sanitize=true#only-dark)&lt;/p&gt;&lt;h2&gt;CLI&lt;/h2&gt;&lt;p&gt;gNMIc provides an intuitive yet full-featured CLI for interacting with gNMI-capable targets. It fully implements [gNMI v0.7+ specification][gnmi-ref] with extensions[^1], and with the move under Openconfig, it becomes a standard gNMI CLI tool.&lt;/p&gt;&lt;p&gt;In 2020 I &lt;a href=&#34;../2020/gnmic.md&#34;&gt;wrote about gNMIc&lt;/a&gt; highlighting its CLI capabilities. Since then CLI side of gNMIc has only become better with the following changes:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Added [template-based payloads][template-set] to simplify complex and data-driven configuration use cases.&lt;/li&gt;&lt;li&gt;[GetSet command][getset-cmd] introduced to allow conditional execution of a Set RPC based on a received Get response.&lt;/li&gt;&lt;li&gt;Implemented [&lt;code&gt;diff&lt;/code&gt; command][diff-cmd] to compare configurations between two different targets and identify configuration drift.&lt;/li&gt;&lt;li&gt;Added [&lt;code&gt;prompt&lt;/code&gt; mode][prompt-cmd] for a guided CLI experience.&lt;/li&gt;&lt;li&gt;Added [generation of paths][path-gen] out of the YANG modules.&lt;/li&gt;&lt;li&gt;Support configuration via any of the following methods: CLI flags, environment variables, or file.&lt;/li&gt;&lt;li&gt;Integrated prototext and protojson output options to display raw requests and responses.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;!!!tip &#34;gNMIc CLI&#34; Easy one-click installation, multi-arch/multi-OS hermetic binary, full feature parity with gNMI spec and intuitive commands layout make &lt;code&gt;gnmic&lt;/code&gt; tool a perfect choice for the task.&lt;/p&gt;&lt;div class=&#34;ext-code-divider&#34;&gt;&lt;hr /&gt;&lt;span class=&#34;twemoji vertical-middle&#34;&gt;&lt;svg xmlns=&#34;http://www.w3.org/2000/svg&#34; viewBox=&#34;0 0 640 512&#34;&gt;&lt;path d=&#34;M392.8 1.2c-17-4.9-34.7 5-39.6 22l-128 448c-4.9 17 5 34.7 22 39.6s34.7-5 39.6-22l128-448c4.9-17-5-34.7-22-39.6zm80.6 120.1c-12.5 12.5-12.5 32.8 0 45.3L562.7 256l-89.4 89.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l112-112c12.5-12.5 12.5-32.8 0-45.3l-112-112c-12.5-12.5-32.8-12.5-45.3 0zm-306.7 0c-12.5-12.5-32.8-12.5-45.3 0l-112 112c-12.5 12.5-12.5 32.8 0 45.3l112 112c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L77.3 256l89.4-89.4c12.5-12.5 12.5-32.8 0-45.3z&#34;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;hr /&gt;&lt;/div&gt;&lt;h2&gt;Collector&lt;/h2&gt;&lt;p&gt;Having a great CLI was just the beginning; the lion&#39;s share of changes happened in the collector area of gNMIc.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;collector&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/9f535d6b64cc5794d995104e37a8c04a/image.png&#34;&gt;{: class=&#34;img-shadow&#34;}&lt;br&gt;&lt;center&gt;&lt;small&gt;gNMIc as a collector in a typical open-source streaming telemetry deployment&lt;/small&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;With the growing interest in Streaming Telemetry, we saw an opportunity to create an open-source telemetry collector to meet the demand. Not just &lt;em&gt;a collector&lt;/em&gt;...&lt;/p&gt;</description><link>https://netdevops.me/2022/gnmic-joins-openconfig/</link> <pubDate>Tue, 15 Aug 2023 10:19:41 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2022/gnmic-joins-openconfig/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2022/gnmic-joins-openconfig/</guid> </item> <item> <title>Test coverage for Go integration tests</title> <author>rdodin</author> <category>containerlab</category> <category>go</category> <category>testing</category> <description>&lt;h1&gt;Test coverage for Go integration tests&lt;/h1&gt;&lt;p&gt;I have been working on &lt;a href=&#34;https://containerlab.dev&#34;&gt;containerlab&lt;/a&gt; for a while now; a project that once started as a simple idea of a tool that would create and wire up SR Linux containers grew into a full-blown network emulation tool loved by the community and used in labs by many.&lt;/p&gt;&lt;p&gt;As it became evident that many more users started to rely on containerlab for their daily work, the looming feeling of responsibility for the quality of the tool started to creep in. At the same time, the growing user base exposed us to many more feature requests and integrations, making it harder to find time to address technical debt and improve testing.&lt;/p&gt;&lt;p&gt;Given the nature of the project, it was clear that integration tests offer a quick way to validate the functionality, as we could replicate the user&#39;s workflow and verify the outcome. However, the integration tests are not without their own challenges, and one of them is the test coverage which is not as easy to get as with unit tests.&lt;/p&gt;&lt;p&gt;In this post, I will share how coverage enhancements introduced in Go 1.20 helped us to get the coverage for our integration tests and jump from a miserable 20% to a (less sad) 50%.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;Why not unit tests?&lt;/h2&gt;&lt;p&gt;You might wonder if it would be easier, more correct, faster, and more proper to write unit tests and get the coverage out of the box. Well, yes, but also no.&lt;/p&gt;&lt;p&gt;Like in the meme &#34;draw an owl&#34; writing unit tests for a &lt;code&gt;sum(a,b int) int&lt;/code&gt; is easy, but crafting tests for interactions with container runtimes is not. Mocking, interface stubs generation, state management and other things that come with unit tests are not always easy to implement and maintain. Especially if you&#39;re not a pro Go developer with years of experience.&lt;/p&gt;&lt;p&gt;Consequently, when I looked at what it&#39;d take to write proper unit tests for containerlab, I decided to go with integration tests instead. The integration tests are easier to write, and they are more representative of the user&#39;s workflow. Yes, they run way slower, but that&#39;s a trade-off I was willing to make.&lt;/p&gt;&lt;h2&gt;Containerlab integration tests&lt;/h2&gt;&lt;p&gt;People are debating which integration test runners are better. Some popular options are &lt;a href=&#34;https://bats-core.readthedocs.io/en/stable/&#34;&gt;bats&lt;/a&gt;, &lt;a href=&#34;https://onsi.github.io/ginkgo/&#34;&gt;ginkgo&lt;/a&gt;, &lt;a href=&#34;https://robotframework.org/&#34;&gt;Robot Framework&lt;/a&gt;, and many others. I&#39;ve been working with Ginkgo and Robot, but given that I had more experience with Robot, I decided to go with it.&lt;/p&gt;&lt;p&gt;!!!tip Robot Framework is a Python-based test automation framework that allows you to write tests in a human-readable format (business-driven testing). Tests are written in a keyword-driven style which makes it easy to create readable tests.&lt;/p&gt;&lt;p&gt;An example of a Robot test that deploys a test topology and verifies that the nodes are up and running, and links are opertional[^1]:&lt;/p&gt;&lt;p&gt;```robotframework&lt;strong&gt;&lt;em&gt; Test Cases &lt;/em&gt;&lt;/strong&gt;Deploy ${lab-name} lab ${rc} ${output} = Run And Return Rc And Output ... sudo -E ${CLAB_BIN} --runtime ${runtime} deploy -t ${CURDIR}/${lab-file}&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Should Be Equal As Integers ${rc} 0&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Verify links in node l1 ${rc} ${output} = Run And Return Rc And Output ... ${runtime-cli-exec-cmd} clab-${lab-name}-l1 ip link show eth1&lt;/p&gt;&lt;pre&gt;&lt;code&gt;Should Be Equal As Integers ${rc} 0Should Contain ${output} state UP${rc} ${output} = Run And Return Rc And Output... ${runtime-cli-exec-cmd} clab-${lab-name}-l1 ip link show eth2Should Be Equal As Integers ${rc} 0Should Contain ${output} state UP&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;For the sake of this post, I will not go into the details of how RF test suites are built; it is sufficient to say that the tests are started by invoking a &lt;a href=&#34;https://github.com/srl-labs/containerlab/blob/main/tests/rf-run.sh&#34;&gt;shell script&lt;/a&gt; that runs the &lt;code&gt;robot&lt;/code&gt; command that starts the test execution.&lt;/p&gt;&lt;p&gt;&lt;code&gt;bash title=&#34;snippet from rf-run.sh script&#34;GOCOVERDIR=${COV_DIR} robot --consolecolors on -r none \ --variable CLAB_BIN:${CLAB_BIN} --variable runtime:$1 \  -l ./tests/out/$(basename $2)-$1-log \ --output ./tests/out/$(basename $2)-$1-out.xml $2&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The integration tests use the &lt;code&gt;containerlab&lt;/code&gt; binary that is built using the tip of the branch that is being tested. Unit tests and integration tests run in parallel allowing to identify error in both test suites. The following diagram shows the relationship between the unit and integration tests:&lt;/p&gt;&lt;p&gt;```mermaidstateDiagram-v2 build : Build containerlab binary unit : Run unit tests integration1 : Run integration tests suite #1 integration2 : Run integration tests suite #2 integrationN : Run integration tests suite #N&lt;/p&gt;&lt;pre&gt;&lt;code&gt;build --&amp;gt; integration1build --&amp;gt; integration2build --&amp;gt; integrationN&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;In reality, this translates into the following GitHub actions pipeline:&lt;/p&gt;&lt;figure&gt; &lt;img src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/f99eed7c5699cd13870b0805320c2da0/image.png&#34;/&gt; &lt;figcaption&gt;containerlab ...</description><link>https://netdevops.me/2023/test-coverage-for-go-integration-tests/</link> <pubDate>Tue, 15 Aug 2023 10:01:20 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2023/test-coverage-for-go-integration-tests/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2023/test-coverage-for-go-integration-tests/</guid> </item> <item> <title>Getting XML data sample for a given leaf in a YANG model</title> <author>rdodin</author> <category>docker</category> <category>netconf</category> <category>yang</category> <description>&lt;h1&gt;Getting XML data sample for a given leaf in a YANG model&lt;/h1&gt;&lt;p&gt;We can praise YANG as long as we want, but for an end user YANG is useful as the tooling around it and the applications leveraging it. Ask yourself, as a user of any kind of NETCONF/YANG application what was the last time you looked at a &lt;code&gt;*.yang&lt;/code&gt; file content and found something that was needed to consume that application?&lt;br&gt;In a user role I personally never look at a YANG source, though, I look at the tree or HTML representation of YANG all the time; Thats is the YANG human interface for me.&lt;/p&gt;&lt;p&gt;And even in these human friendly formats you can&#39;t find all the answers; for example, looking at the YANG tree, how do you get the XML data sample of a given leaf? Thats what we will discover in this post.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;Problem statement&lt;/h2&gt;&lt;p&gt;Getting the XML data sample of a given leaf? What is this, why might I need it?&lt;/p&gt;&lt;p&gt;Lets work through a real-life example that should make a perfect point. Suppose you need to get a list of configured users from a given network element (NE). You would normally do this by leveraging &lt;code&gt;&amp;lt;get-config&amp;gt;&lt;/code&gt; operation, but in order to get only the users portion of the configuration, you would need to augment your request with a filter.&lt;/p&gt;&lt;p&gt;NETCONF defaults to &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6241#autoid-22&#34;&gt;subtree filtering&lt;/a&gt; when it comes to filters.&lt;/p&gt;&lt;p&gt;```xml&lt;/p&gt;&lt;!-- subtree filter example from RFC6241 --&gt;&lt;p&gt;&lt;rpc message-id=&#34;101&#34; xmlns=&#34;urn:ietf:params:xml:ns:netconf:base:1.0&#34;&gt; &lt;get-config&gt; &lt;source&gt; &lt;running/&gt; &lt;/source&gt; &lt;filter type=&#34;subtree&#34;&gt; &lt;top xmlns=&#34;http://example.com/schema/1.2/config&#34;&gt; &lt;users/&gt; &lt;/top&gt; &lt;/filter&gt; &lt;/get-config&gt;&lt;/rpc&gt;```&lt;/p&gt;&lt;p&gt;Now the question comes: how do one know how to craft the subtree filter XML data for a given NE? If you will send the above XML envelope to any NE you will receive an error, because the subtree filter provided is not how the users are modelled in the underlying YANG model.&lt;/p&gt;&lt;p&gt;Yes, it boils down to an underlying model used by a given NE; you would need to consult with this model and derive the right nodes to get to the configuration block in question.&lt;/p&gt;&lt;p&gt;Actually, that post is a feedback to the question that popped up in my twitter recently:&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;Hello &lt;a href=&#34;https://twitter.com/nickrusso42518?ref_src=twsrc%5Etfw&#34;&gt;@nickrusso42518&lt;/a&gt; &lt;a href=&#34;https://twitter.com/ntdvps?ref_src=twsrc%5Etfw&#34;&gt;@ntdvps&lt;/a&gt; whats the best way to transform a YANG file/section into a XML filter to use in a NETCONF get message? I used to export YANG file with pyang to html format, but it bothers me put the exact tree by hand. Are there an easy way?&lt;/p&gt;&amp;mdash; Rafael Ganascim (@rganascim) &lt;a href=&#34;https://twitter.com/rganascim/status/1223087371299753984?ref_src=twsrc%5Etfw&#34;&gt;January 31, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;&lt;h2&gt;Solving the problem with PYANG&lt;/h2&gt;&lt;p&gt;Rafael asked a very practical question that every NETCONF user encounters; ours example follows the same question by asking &lt;strong&gt;how do I know which XML data to use in my subtree filter to get users config, are there aby tools for that?&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;It didn&#39;t take Rafael long to come up with a solution to his own question, which he explained in the same thread:&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;I found an &amp;quot;easy&amp;quot; way to get the xml tree, instead of writing by hand&lt;/p&gt;&amp;mdash; Rafael Ganascim (@rganascim) &lt;a href=&#34;https://twitter.com/rganascim/status/1223221183753134080?ref_src=twsrc%5Etfw&#34;&gt;January 31, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;As you can see, he leveraged &lt;a href=&#34;https://github.com/mbj4668/pyang&#34;&gt;PYANG&lt;/a&gt; and solved the problem with a grain of &lt;code&gt;sed&lt;/code&gt; salt. The steps he took can be categorized with 4 major steps:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Generated HTML view of a YANG model (jstree output format)&lt;/li&gt;&lt;li&gt;Copy the path of a node in question&lt;/li&gt;&lt;li&gt;Remove the prefix from that path&lt;/li&gt;&lt;li&gt;Generate XML skeleton data for that cleaned path&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Lets solve our example question following this method and using Nokia SR OS router running 19.10.r2.&lt;/p&gt;&lt;p&gt;First, lets enjoy the generated HTML views of Nokia SR OS models provided in the &lt;a href=&#34;https://github.com/hellt/nokia-yangtree/tree/sros_19.10.r6&#34;&gt;nokia-yangtree repo&lt;/a&gt;, no need to generate anything yourself, we value your time and here we got you covered.&lt;br&gt;Few clicks away and you drill down to the &lt;code&gt;user&lt;/code&gt; list of the configuration model. Thats where our configured local users live.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;users_yang&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/4e657129cac96662d75c2e5908cf0275/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;To our grief, PYANG cant digest the path that it produces in its Path column of the HTML view, therefore we need to sanitize it and remove the path prefix (&lt;code&gt;conf&lt;/code&gt; in our case) from it:&lt;/p&gt;&lt;p&gt;```bash&lt;/p&gt;&lt;h1&gt;path in the HTML: /conf:configure/conf:system/conf:security/conf:user-params/conf:local-user/conf:user&lt;/h1&gt;&lt;p&gt;/co...&lt;/p&gt;</description><link>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</link> <pubDate>Tue, 21 Mar 2023 20:01:39 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</guid> </item> <item> <title>NETCONF subtree filtering by example</title> <author>rdodin</author> <category>netconf</category> <description>&lt;h1&gt;NETCONF subtree filtering by example&lt;/h1&gt;&lt;p&gt;If you pick a random NetEng and ask them if they love NETCONF they would likely say &#34;Nah&#34;. The ~~hate-hate~~ love-hate kind of relationship with NETCONF mostly roots in its XML layer that one can&#39;t swap out. But if we set the XML-related challenges aside, it will become clear that NETCONF is a very well designed management interface with lots of capabilities. &lt;/p&gt;&lt;p&gt;In this topic we will touch on the NETCONF&#39;s subtree filtering capabilities.&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;NETCONF&#39;s &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6241&#34;&gt;RFC 6241&lt;/a&gt; defines two methods for filtering contents on the server (router) side:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6241#autoid-22&#34;&gt;Subtree filtering&lt;/a&gt; - mandatory for a NETCONF-enabled device to support&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc6241#autoid-110&#34;&gt;XPATH filtering&lt;/a&gt; - an optional capability&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Subtree filtering is powered by the following components:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Namespace Selection&lt;/li&gt;&lt;li&gt;Attribute Match Expressions&lt;/li&gt;&lt;li&gt;Containment Nodes&lt;/li&gt;&lt;li&gt;Selection Nodes&lt;/li&gt;&lt;li&gt;Content Match Nodes&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;They are very well explained in the RFC, so I won&#39;t bother with copy-pasting the definition and the rules these filtering components follow. Instead we will focus on the practical examples and put Selection and Content Match nodes to work in different scenarios.&lt;/p&gt;&lt;h3&gt;1 Selection nodes&lt;/h3&gt;&lt;p&gt;Selection node allow us to get a node and all its nested elements. Our simple examples will revolve around interactions with local users configuration on a Nokia SR OS which is modelled with the following YANG model:&lt;/p&gt;&lt;p&gt;&lt;code&gt;textmodule: nokia-conf +--rw configure +--rw system | +--rw security | | +--rw user-params | | +--rw local-user | | +--rw user* [user-name] | | +--rw user-name types-sros:named-item | | +--rw password types-sros:hashed-leaf | | +--rw access | | | +--rw console? boolean | | | +--rw ftp? boolean | | | +--rw snmp? boolean | | | +--rw netconf? boolean | | | +--rw grpc? boolean | | | +--rw li? boolean | | +--rw console +--rw member* -&amp;gt;../aaa/local-profiles…&lt;/code&gt;&lt;/p&gt;&lt;p&gt;If we want to filter all the configuration information related to the local users we could use Selection node &lt;code&gt;&amp;lt;local-user/&amp;gt;&lt;/code&gt; in our get-config RPC:&lt;/p&gt;&lt;p&gt;&lt;code&gt;xml&amp;lt;get-config&amp;gt; &amp;lt;source&amp;gt; &amp;lt;running /&amp;gt; &amp;lt;/source&amp;gt; &amp;lt;filter&amp;gt; &amp;lt;configure xmlns=&#34;urn:nokia.com:sros:ns:yang:sr:conf&#34;&amp;gt; &amp;lt;system&amp;gt; &amp;lt;security&amp;gt; &amp;lt;user-params&amp;gt; &amp;lt;local-user/&amp;gt; &amp;lt;!-- selection node --&amp;gt; &amp;lt;/user-params&amp;gt; &amp;lt;/security&amp;gt; &amp;lt;/system&amp;gt; &amp;lt;/configure&amp;gt; &amp;lt;/filter&amp;gt;&amp;lt;/get-config&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Hint #1: &lt;a href=&#34;https://netdevops.me/2020/nokia-yang-tree-and-path-browser/&#34;&gt;Nokia-yangtree&lt;/a&gt; is a beautiful way to explore Nokia YANG models.&lt;br&gt;Hint #2: I recommend &lt;a href=&#34;https://netdevops.me/2020/netconf-console-in-a-docker-container/&#34;&gt;netconf-console&lt;/a&gt; to talk NETCONF to your routers.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;If we translate this get-operation command to plain English it would sound like: &lt;em&gt;Dear router, can you please return everything you have under &lt;code&gt;local-user&lt;/code&gt; node in the running configuration datastore?&lt;/em&gt;&lt;br&gt;And that is what router replies back:&lt;/p&gt;&lt;p&gt;```xml&lt;rpc-reply xmlns:nc=&#34;urn:ietf:params:xml:ns:netconf:base:1.0&#34; xmlns=&#34;urn:ietf:params:xml:ns:netconf:base:1.0&#34; message-id=&#34;urn:uuid:f00ec433-17b3-4bcb-9d83-c3557794e56e&#34;&gt; &lt;data&gt; &lt;configure xmlns=&#34;urn:nokia.com:sros:ns:yang:sr:conf&#34;&gt; &lt;system&gt; &lt;security&gt; &lt;user-params&gt; &lt;local-user&gt; &lt;user&gt; &lt;user-name&gt;admin&lt;/user-name&gt; &lt;password&gt;$2y$10$Ro5MzyBZ18eVve/aTIYt..fSBbyJar11QGcQbixrVPfxLcpXeZ4eu&lt;/password&gt; &lt;access&gt; &lt;console&gt;true&lt;/console&gt; &lt;netconf&gt;true&lt;/netconf&gt; &lt;grpc&gt;true&lt;/grpc&gt; &lt;/access&gt; &lt;console&gt; &lt;member&gt;administrative&lt;/member&gt; &lt;/console&gt; &lt;/user&gt; &lt;user&gt; &lt;user-name&gt;roman&lt;/user-name&gt; &lt;password&gt;$2y$10$xkqn46jNHBUJWit446j2o.Yu3E9zWOg44yRGjRK2YjRZE4p5xFjmG&lt;/password&gt; &lt;access&gt; &lt;console&gt;true&lt;/console&gt; &lt;/access&gt; &lt;console&gt; &lt;member&gt;default&lt;/member&gt; &lt;/console&gt; &lt;/user&gt; &lt;/local-user&gt; ...&lt;/p&gt;</description><link>https://netdevops.me/2020/netconf-subtree-filtering-by-example/</link> <pubDate>Tue, 21 Mar 2023 19:44:31 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2020/netconf-subtree-filtering-by-example/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2020/netconf-subtree-filtering-by-example/</guid> </item> <item> <title>BGP VPLS deep dive. Nokia SR OS &amp; Juniper</title> <author>rdodin</author> <category>bgp</category> <category>juniper</category> <category>nokia</category> <category>vpls</category> <description>&lt;h1&gt;BGP VPLS deep dive. Nokia SR OS &amp;amp; Juniper&lt;/h1&gt;&lt;p&gt;It may very well be that VPLS days are numbered and EVPN is to blame. Nevertheless, it would be naive to expect VPLS extinction in the near future. With all its shortcomings VPLS is still very well standardized, interop-proven and has a huge footprint in MPLS networks of various scale.&lt;/p&gt;&lt;p&gt;In this post I will cover theory and configuration parts for one particular flavor of VPLS signalling - BGP VPLS (aka Kompella VPLS) defined in &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc4761&#34;&gt;RFC4761&lt;/a&gt;. I&#39;ll start with simple single home VPLS scenario while multi-homing techniques and some advanced configurations might appear in a separate post later.&lt;/p&gt;&lt;p&gt;In this topic the following SW releases were used:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Nokia (Alcatel-Lucent) VSR 14.0.R4&lt;/li&gt;&lt;li&gt;Juniper vMX 14.1R1.10&lt;/li&gt;&lt;/ul&gt;&lt;!-- more --&gt;&lt;h3&gt;BGP VPLS Basics&lt;/h3&gt;&lt;p&gt;Virtual Private LAN Service (VPLS) is seen like an Ethernet LAN by the customers of a Service Provider. However, in a VPLS, not all of the customers are connected to a single LAN; they may be spread across a metro or wide area network. In essence, a VPLS glues together several individual LANs across a packet switched network to appear and function as a single LAN. This is accomplished by incorporating MAC address learning, flooding, and forwarding functions in the context of pseudowires that connect these individual LANs.&lt;/p&gt;&lt;p&gt;The entire VPLS service behaves like a big switch with distributed MAC learning intelligence implemented on each PE, and as in a switch, MAC learning happens in a dataplane.&lt;/p&gt;&lt;div align=&#34;center&#34;&gt; &lt;img src=&#34;https://img-fotki.yandex.ru/get/194989/21639405.11c/0_8b216_eacf5704_XL.png&#34; /&gt;&lt;/div&gt;&lt;p&gt;The following two types of interfaces are typical for VPLS:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Attachment Circuits (AC) - circuits connecting Customer Edge (CE) devices to Provider Edge (PE) routers. PE routers often called VPLS Edge (VE) devices in VPLS terminology.&lt;/li&gt;&lt;li&gt;Pseudowires (PW) - circuits connecting PEs between each other&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;In the context of a given VPLS instance, a PE can have one or more local ACs, and one or more PWs toward remote PEs. Full-mesh of transport tunnels between PEs is required.&lt;/p&gt;&lt;p&gt;In Kompella VPLS, BGP is a key enabler and is responsible for:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Auto-discovery&lt;/strong&gt;: process of finding all PE routers participating in a VPLS instance;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Signalling&lt;/strong&gt;: the setup and tear-down of pseudowires (PW) that constitute the VPLS service.&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Auto-discovery&lt;/h4&gt;&lt;p&gt;Each PE &#34;discovers&#34; which other PEs are part of a given VPLS by means of BGP. This allows each PE&#39;s configuration to consist only of the identity of the VPLS instance established on this PE, not the identity of every other PE in that VPLS instance. Moreover, when the topology of a VPLS changes, only the affected PE&#39;s configuration changes; other PEs automatically find out about the change and adapt.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The Route Target community is used to identify members of a VPLS. A PE announces that it belongs to &lt;code&gt;VPLS V&lt;/code&gt; by annotating its NLRIs for &lt;code&gt;VPLS V&lt;/code&gt; with Route Target &lt;code&gt;RT&lt;/code&gt;, and acts on this by accepting NLRIs from other PEs that have Route Target &lt;code&gt;RT&lt;/code&gt;. A PE announces that it no longer participates in &lt;code&gt;VPLS V&lt;/code&gt; by withdrawing all NLRIs that it had advertised with Route Target &lt;code&gt;RT&lt;/code&gt;.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;Signalling&lt;/h4&gt;&lt;p&gt;Once discovery is done, each pair of PEs in a VPLS must be able to establish (and tear down) pseudowires to each other, i.e., exchange (and withdraw) &lt;em&gt;demultiplexors&lt;/em&gt;. This process is known as signaling. Signaling is also used to transmit certain characteristics of the pseudowires that a PE sets up for a given VPLS.&lt;/p&gt;&lt;p&gt;BGP Update message carrying BGP VPLS NLRI (AFI:25, SAFI:65) is used to signal VPLS membership and multiplexors for a VPLS service:&lt;/p&gt;&lt;p&gt;&lt;img src=&#34;http://img-fotki.yandex.ru/get/194989/21639405.11c/0_8b217_8630d094_XL.png&#34;/&gt;&lt;/p&gt;&lt;p&gt;Let&#39;s expand some of the fields of the BGP VPLS NLRI:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;Route Distinguisher&lt;/strong&gt; - used to differentiate between customer NLRIs thus should be unique for every VPLS service. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;VE ID&lt;/strong&gt; - unique identifier (aka site-id), manually assigned to every VPLS Edge device. &lt;/li&gt;&lt;li&gt;&lt;strong&gt;VE Block Offset, VE Block Size and Label Base&lt;/strong&gt; are used for calculating the service label (multiplexor).&lt;/li&gt;&lt;/ul&gt;&lt;h4&gt;Label Blocks&lt;/h4&gt;&lt;p&gt;Using a distinct BGP Update message to send a demultiplexor to each remote PE would require the originating PE to send N such messages for N remote PEs. In order to minimize the control plane load original standard introduced &lt;code&gt;Label Blocks&lt;/code&gt; which drastically reduce the amount of BGP Update messages. A label block is a set of demultiplexor labels used to reach a given VE ID.&lt;/p&gt;&lt;p&gt;A single BGP VPLS NLRI signals a label block which consists of:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;VE ID&lt;/strong&gt; - manually assigned to VE device identifier&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Label Base (LB)&lt;/strong&gt; - first label assigned to a label block&lt;/li&gt;&lt;li&gt;&lt;strong&gt;VE Block Size (VBS)&lt;/strong&gt; - number of labels assigned to a label block. Vendor-dependant value, Nokia and Juniper both use Block Size of 8.&lt;/li&gt;&lt;li&gt;&lt;strong&gt;VE Block Offset (VBO)&lt;/strong&gt; - first VE ID assigned to a label block&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;A contiguous label block defined by &lt;code&gt;&amp;lt;LB, VBO, VBS&amp;gt;&lt;/code&gt; is the set `{LB+V...&lt;/p&gt;</description><link>https://netdevops.me/2016/bgp-vpls-deep-dive-nokia-sr-os-juniper/</link> <pubDate>Tue, 21 Mar 2023 19:44:31 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2016/bgp-vpls-deep-dive-nokia-sr-os-juniper/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2016/bgp-vpls-deep-dive-nokia-sr-os-juniper/</guid> </item> <item> <title>Installing xrdp 0.9.1 on Ubuntu 16.04 Xenial</title> <author>rdodin</author> <category>ubuntu</category> <category>xrdp</category> <description>&lt;h1&gt;Installing xrdp 0.9.1 on Ubuntu 16.04 Xenial&lt;/h1&gt;&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Xrdp&#34;&gt;xrdp&lt;/a&gt; is defacto the default RDP server for Linux systems sharing with VNC the &lt;em&gt;remote access solution&lt;/em&gt; olympus. I personally found it more resource friendly and feature rich compared to VNC solutions I tried.&lt;/p&gt;&lt;p&gt;The only problem I found with &lt;code&gt;xrdp&lt;/code&gt; is that current Ubuntu LTS release Xenial 16.04 has a way outdated 0.6.1-2 version of xrdp in the packages repo. This version has no shared clipboard support, which makes remote support/remote access a tedious task.&lt;/p&gt;&lt;p&gt;xrdp currently &lt;a href=&#34;https://github.com/neutrinolabs/xrdp/releases&#34;&gt;in its 0.9.3 version&lt;/a&gt; and it would be really nice to have a more recent package, rather than installing it from sources, like &lt;a href=&#34;http://c-nergy.be/blog/?p=8969&#34;&gt;many&lt;/a&gt; &lt;a href=&#34;https://ethernetworkingnotes.blogspot.ru/2017/01/install-latest-xrdp-release-on-ubuntu.html&#34;&gt;solutions&lt;/a&gt; &lt;a href=&#34;https://www.google.ru/search?q=xrdp+0.9+ubuntu+16.04&amp;amp;newwindow=1&amp;amp;ei=GLufWbfIKYf4wAKK85mICA&amp;amp;start=0&amp;amp;sa=N&amp;amp;biw=1920&amp;amp;bih=935&#34;&gt;propose&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Well, no need to compile &lt;code&gt;xrdp&lt;/code&gt; from sources (unless you want to), because you can leverage &lt;a href=&#34;https://launchpad.net/~hermlnx/+archive/ubuntu/xrdp&#34;&gt;a ppa from hermlnx&lt;/a&gt; that has &lt;code&gt;xrdp 0.9.1-7&lt;/code&gt; already built for &lt;strong&gt;amd64&lt;/strong&gt; and &lt;strong&gt;i386&lt;/strong&gt; systems&lt;/p&gt;&lt;p&gt;```bash&lt;/p&gt;&lt;h1&gt;all you need is&lt;/h1&gt;&lt;p&gt;sudo add-apt-repository ppa:hermlnx/xrdpsudo apt-get updatesudo apt-get install xrdp```&lt;/p&gt;&lt;p&gt;You can also try a &lt;code&gt;deb&lt;/code&gt; package of &lt;code&gt;xrdp 0.9.2&lt;/code&gt; -- &lt;a href=&#34;https://github.com/suminona/xrdp-ru-audio&#34;&gt;https://github.com/suminona/xrdp-ru-audio&lt;/a&gt;&lt;/p&gt;</description><link>https://netdevops.me/2017/installing-xrdp-091-on-ubuntu-1604-xenial/</link> <pubDate>Tue, 21 Mar 2023 19:40:53 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2017/installing-xrdp-091-on-ubuntu-1604-xenial/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2017/installing-xrdp-091-on-ubuntu-1604-xenial/</guid> </item> <item> <title>gNMIc talks at DKNOG and NANOG</title> <author>rdodin</author> <category>dknog</category> <category>gnmi</category> <category>gnmic</category> <category>nanog</category> <description>&lt;h1&gt;gNMIc talks at DKNOG and NANOG&lt;/h1&gt;&lt;p&gt;If you have never heard of gNMI and/or &lt;a href=&#34;https://gnmic.openconfig.net&#34;&gt;gNMIc&lt;/a&gt; project, you can start with my last week&#39;s talk DKNOG&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;/p&gt;&lt;iframe type=&#34;text/html&#34; width=&#34;80%&#34; height=&#34;465&#34; src=&#34;https://www.youtube.com/embed/mWjiIx4vMvg&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;Thirty minutes introduction to gNMI and gNMIc to get you started.&lt;/p&gt;&lt;p&gt;After this taster, you will likely want to know more, and Karim Radhouani has you covered. A 1-hour gNMIc tutorial has recently been published directly from NANOG 87 stage.&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;/p&gt;&lt;iframe type=&#34;text/html&#34; width=&#34;80%&#34; height=&#34;465&#34; src=&#34;https://www.youtube.com/embed/v3CL2vrGD_8&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;&lt;p&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;After this one you&#39;ll never wanna see OIDs again.&lt;/p&gt;</description><link>https://netdevops.me/2023/gnmic-talks-at-dknog-and-nanog/</link> <pubDate>Tue, 21 Mar 2023 17:54:52 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2023/gnmic-talks-at-dknog-and-nanog/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2023/gnmic-talks-at-dknog-and-nanog/</guid> </item> <item> <title>SR Linux logging with ELK</title> <author>rdodin</author> <category>elk</category> <category>logging</category> <category>srlinux</category> <description>&lt;h1&gt;SR Linux logging with ELK&lt;/h1&gt;&lt;p&gt;Implementing centralized logging using modern log collectors is an interesting task even before you start solving scaling problems.&lt;/p&gt;&lt;p&gt;My colleague and I opened up a series of posts dedicated to logging in the context of datacenter networks. We started with the basics of SR Linux logging and used the famous ELK stack as our log storage/processing solution.&lt;/p&gt;&lt;p&gt;Integrating SR Linux logging with ELK via Syslog was fun, and we tried to capture every step of the way. Plus, we create a containerlab-based lab that anyone can use to test the solution themselves.&lt;/p&gt;&lt;p&gt;Dig into &lt;a href=&#34;https://learn.srlinux.dev/blog/2023/sr-linux-logging-with-elk/&#34;&gt;&lt;strong&gt;&#34;SR Linux logging with ELK&#34;&lt;/strong&gt;&lt;/a&gt; and open up the world of modern logging.&lt;/p&gt;</description><link>https://netdevops.me/2023/sr-linux-logging-with-elk/</link> <pubDate>Wed, 15 Feb 2023 13:00:44 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2023/sr-linux-logging-with-elk/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2023/sr-linux-logging-with-elk/</guid> </item> <item> <title>Building AWS Lambda with Python, S3 and serverless</title> <author>rdodin</author> <category>aws</category> <category>aws lambda</category> <category>boto3</category> <category>python</category> <category>serverless</category> <description>&lt;h1&gt;Building AWS Lambda with Python, S3 and serverless&lt;/h1&gt;&lt;p&gt;Cloud-native revolution pointed out the fact that the microservice is the new building block and your best friends now are Containers, AWS, GCE, Openshift, Kubernetes, you-name-it. But suddenly &lt;em&gt;micro&lt;/em&gt; became not that granular enough and people started talking about &lt;em&gt;serverless functions&lt;/em&gt;!&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;pic&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/a115166eb200861e796a0a5a847da8e7/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;When I decided to step in the serverless property I chose &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/welcome.html&#34;&gt;AWS Lambda&lt;/a&gt; as my instrument of choice. As for experimental subject, I picked up one of my existing projects - a script that tracks new documentation releases for Nokia IP/SDN products (which in the past I aggregated at &lt;code&gt;nokdoc.github.io&lt;/code&gt; (now closed)).&lt;/p&gt;&lt;p&gt;Given that not so many posts are going deeper than onboarding a simplest function, I decided to write down the key pieces I needed to uncover to push a &lt;strong&gt;real code&lt;/strong&gt; to the Lambda.&lt;/p&gt;&lt;p&gt;Buckle up, our agenda is fascinating:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;testing basic Lambda onboarding process powered by Serverless framework&lt;/li&gt;&lt;li&gt;accessing files in AWS S3 from within our Lambda with &lt;code&gt;boto3&lt;/code&gt; package and custom AWS IAM role&lt;/li&gt;&lt;li&gt;packaging non-standard python modules for our Lambda&lt;/li&gt;&lt;li&gt;exploring ways to provision shared code for Lambdas&lt;/li&gt;&lt;li&gt;and using path variables to branch out the code in Lambda&lt;/li&gt;&lt;/ul&gt;&lt;!-- more --&gt;&lt;h2&gt;Init&lt;/h2&gt;&lt;p&gt;What I am going to &lt;em&gt;lambdsify&lt;/em&gt; is an existing python3 script called &lt;strong&gt;nokdoc-sentinel&lt;/strong&gt; which has the following Lambda-related properties:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;uses non standard python package -- &lt;code&gt;requests&lt;/code&gt;&lt;/li&gt;&lt;li&gt;reads/writes a file.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I specifically emphasized this non-std packages and relying on persistence since these aspects are not covered in 99% of Lambda-related posts, so, filling the spot.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;AWS Lambda is a compute service that lets you run code without provisioning or managing servers. AWS Lambda executes your code only when needed and scales automatically, from a few requests per day to thousands per second.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Multiple choices are exposed to you when choosing an instrument to configure &amp;amp; deploy an AWS Lambda:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;AWS Console (web)&lt;/li&gt;&lt;li&gt;AWS CLI&lt;/li&gt;&lt;li&gt;Multiple frameworks (&lt;a href=&#34;https://serverless.com/&#34;&gt;Serverless&lt;/a&gt;, &lt;a href=&#34;https://chalice.readthedocs.io/en/latest/index.html&#34;&gt;Chalice&lt;/a&gt;, &lt;a href=&#34;http://pywren.io/&#34;&gt;Pywren&lt;/a&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;While it might be good to feel the taste of a manual Lambda configuration process through the AWS Console, I decided to go &#34;everything as a code&#34; way and use the &lt;a href=&#34;https://serverless.com/&#34;&gt;Serverless&lt;/a&gt; framework to define, configure and deploy my first Lambda.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;The &lt;strong&gt;Serverless Framework&lt;/strong&gt; helps you develop and deploy your AWS Lambda functions, along with the AWS infrastructure resources they require. It&#39;s a CLI that offers structure, automation and best practices out-of-the-box, allowing you to focus on building sophisticated, event-driven, serverless architectures, comprised of Functions and Events.&lt;/p&gt;&lt;/blockquote&gt;&lt;h2&gt;Serverless installation and configuration&lt;/h2&gt;&lt;p&gt;First things first, &lt;a href=&#34;https://serverless.com/framework/docs/providers/aws/guide/installation/&#34;&gt;install&lt;/a&gt; the framework and &lt;a href=&#34;https://serverless.com/framework/docs/providers/aws/guide/credentials/&#34;&gt;configure AWS credentials&lt;/a&gt;. I already had credentials configured for AWS CLI thus skipped that part, if that is not the case for you, the docs are comprehensive and should have you perfectly covered.&lt;/p&gt;&lt;h2&gt;Creating a Service template&lt;/h2&gt;&lt;p&gt;Once serverless is installed, start with creating an &lt;code&gt;aws-python3&lt;/code&gt; service:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;A &lt;code&gt;service&lt;/code&gt; is like a project. It&#39;s where you define your AWS Lambda Functions, the events that trigger them and any AWS infrastructure resources they require, all in a file called serverless.yml.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;code&gt;bashserverless create --template aws-python3 --name nokdoc-sentinel&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Two files will be created:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;code&gt;handler.py&lt;/code&gt; -- a module with Lambda function boilerplate code&lt;/li&gt;&lt;li&gt;&lt;code&gt;serverless.yml&lt;/code&gt; -- a service definition file&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;Making lambda instance out of a template&lt;/h2&gt;&lt;p&gt;I renamed &lt;code&gt;handler.py&lt;/code&gt; module to &lt;code&gt;sentinel.py&lt;/code&gt;, also changed the enclosed function&#39; name and deleted redundant code from the template. For starters I kept the portion of a sample code just to test that deploying to AWS via serverless actually works.&lt;/p&gt;&lt;p&gt;```python&lt;/p&gt;&lt;h1&gt;sentinel.py&lt;/h1&gt;&lt;p&gt;import json&lt;/p&gt;&lt;p&gt;def check(event, context): body = { &#34;message&#34;: &#34;Sentinel is on watch!&#34;, }&lt;/p&gt;&lt;pre&gt;&lt;code&gt;response = { &#34;statusCode&#34;: 200, &#34;body&#34;: json.dumps(body)}return response&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;```&lt;/p&gt;&lt;p&gt;Thing to remember is that you also must to make appropriate changes in the &lt;code&gt;serverless.yml&lt;/code&gt;, once you renamed the module and the function names:&lt;/p&gt;&lt;p&gt;```bashfunctions:&lt;/p&gt;&lt;h1&gt;name of the func in the module&lt;/h1&gt;&lt;p&gt;check: # &lt;code&gt;handler: sentinel.check&lt;/code&gt; reads as  # &#34;&lt;code&gt;check&lt;/code&gt; function in the &lt;code&gt;sentinel&lt;/code&gt; module handler: sentinel.check```&lt;/p&gt;&lt;h3&gt;Deploying and Testing AWS Lambda&lt;/h3&gt;&lt;p&gt;Before adding some actual load to the Lambda function, lets test that the deployment works. To trigger Lambda execution I added &lt;strong&gt;HTTP GET&lt;/strong&gt; &lt;a href=&#34;https://serverless.com/framework/docs/providers/aws/guide/events/&#34;&gt;event&lt;/a&gt; with...&lt;/p&gt;</description><link>https://netdevops.me/2017/building-aws-lambda-with-python-s3-and-serverless/</link> <pubDate>Wed, 15 Feb 2023 11:01:57 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2017/building-aws-lambda-with-python-s3-and-serverless/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2017/building-aws-lambda-with-python-s3-and-serverless/</guid> </item> <item> <title>Refreshing Go package index for your package</title> <author>rdodin</author> <category>go</category> <description>&lt;h1&gt;Refreshing Go package index for your package&lt;/h1&gt;&lt;p&gt;It is quite frustrating to wait for pkg.go.dev to refresh your index, and I always forget how give it a &lt;a href=&#34;https://go.dev/doc/modules/publishing&#34;&gt;slight push&lt;/a&gt;:&lt;/p&gt;&lt;p&gt;&lt;code&gt;bashGOPROXY=proxy.golang.org go list -m example.com/mymodule@v0.1.0&lt;/code&gt;&lt;/p&gt;&lt;p&gt;The new version won&#39;t appear immediately, but at least it seems it will be quicker to show up.&lt;/p&gt;</description><link>https://netdevops.me/2023/refreshing-go-package-index-for-your-package/</link> <pubDate>Wed, 15 Feb 2023 11:01:57 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2023/refreshing-go-package-index-for-your-package/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2023/refreshing-go-package-index-for-your-package/</guid> </item> <item> <title>Creating a syntax highlighter for SR Linux CLI snippets</title> <author>rdodin</author> <category>pygments</category> <category>srlinux</category> <description>&lt;h1&gt;Creating a syntax highlighter for SR Linux CLI snippets&lt;/h1&gt;&lt;p&gt;How to write a custom syntax highligher for your favorite Network OS CLI and integrate it the doc engine?&lt;/p&gt;&lt;p&gt;=== &#34;Raw text CLI snippet&#34; &lt;code&gt;--{ * candidate shared default }--[ network-instance black ]-- A:leaf1# info static-routes static-routes { route 192.168.18.0/24 { admin-state enable metric 1 preference 5 next-hop-group static-ipv4-grp } route 2001:1::192:168:18:0/64 { admin-state enable metric 1 preference 6 next-hop-group static-ipv6-grp } }&lt;/code&gt;=== &#34;With &lt;code&gt;srl&lt;/code&gt; syntax applied&#34; &lt;code&gt;srl --{ * candidate shared default }--[ network-instance black ]-- A:leaf1# info static-routes static-routes { route 192.168.18.0/24 { admin-state enable metric 1 preference 5 next-hop-group static-ipv4-grp } route 2001:1::192:168:18:0/64 { admin-state enable metric 1 preference 6 next-hop-group static-ipv6-grp } }&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Read in my post &lt;a href=&#34;https://learn.srlinux.dev/blog/2023/sr-linux-syntax-highlighting-with-pygments/&#34;&gt;&lt;strong&gt;&#34;SR Linux Syntax Highlighting with Pygments&#34;&lt;/strong&gt;&lt;/a&gt; at learn.srlinux.dev portal.&lt;/p&gt;</description><link>https://netdevops.me/2023/creating-a-syntax-highlighter-for-sr-linux-cli-snippets/</link> <pubDate>Sun, 08 Jan 2023 20:58:53 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2023/creating-a-syntax-highlighter-for-sr-linux-cli-snippets/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2023/creating-a-syntax-highlighter-for-sr-linux-cli-snippets/</guid> </item> <item> <title>Creating a Bootstrap based front-end for your simple REST service</title> <author>rdodin</author> <category>bootstrap</category> <category>frontend</category> <category>javascript</category> <description>&lt;h1&gt;Creating a Bootstrap based front-end for your simple REST service&lt;/h1&gt;&lt;p&gt;Not a single day goes by without me regretting I haven&#39;t mastered any front-end technology like React/Angular or the likes. Why would a network engineer want to step into the game that seems orthogonal to its main area of expertise, one might ask?&lt;/p&gt;&lt;p&gt;Truth be told, I wasn&#39;t born with an urge to learn anything that has &lt;em&gt;javascript&lt;/em&gt; under the hood, but over the years, working within the network/backend silos, I realized, that being able to create a simple front-end service is a jewel that fits every crown, no matter what title you wear.&lt;/p&gt;&lt;p&gt;This tutorial is based on the task real task of building up a web interface (&lt;a href=&#34;https://pycatjify.netdevops.me&#34;&gt;pycatjify.netdevops.me&lt;/a&gt;) for the &lt;a href=&#34;serverless-gc-functions.md&#34;&gt;&lt;code&gt;pycatjify&lt;/code&gt;&lt;/a&gt; REST API service deployed as a serverless function. The end result is a &lt;strong&gt;simple&lt;/strong&gt;, completely &lt;strong&gt;free&lt;/strong&gt; and &lt;strong&gt;reusable&lt;/strong&gt; Bootstrap based front-end boilerplate which can be used as a foundation for a similar task.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;1 Benefits of knowing how to front-end?&lt;/h2&gt;&lt;p&gt;Lets me first explain why I think that even a basic experience with any front-end technology is beneficial to virtually anyone.&lt;/p&gt;&lt;h3&gt;1.1 Get your tool a web interface&lt;/h3&gt;&lt;p&gt;We often start with an idea of a tool and work it to a completion by publishing a command line interface to it, sometimes the CLI is all the tool needs, it is just best consumed that way. Other times even the CLI is not needed, as the tool is only used as a plugged-in library.&lt;/p&gt;&lt;p&gt;But quite often the tool can benefit greatly by having its own web interface. You can broaden the horizons of your project audience vastly by simply creating a web service out of it. I can name a handful number of tools that I consume via web instead of using their CLI counterparts, it is just more convenient to me and so might think the users of your tools.&lt;/p&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/dbarrosop/pycatj/&#34;&gt;&lt;code&gt;pycatj&lt;/code&gt;&lt;/a&gt; is a perfect example of a CLI-first tool that can be conveniently consumed via web as well. Thus I set myself on a journey to create a web facade for it and at the same time reinforcing my very basic web skills.&lt;/p&gt;&lt;h3&gt;1.2 Take your pitch or demo to a next level&lt;/h3&gt;&lt;p&gt;Not everyone of us is working in an environment where the bosses have engineering background and can equally enjoy a demo of a new service by looking at the terminal full of &lt;code&gt;curl&lt;/code&gt; requests. Even if your bosses are the ones who contribute to the cutting edge technologies, your customers can easily be made of a different dough.&lt;/p&gt;&lt;p&gt;Therefore it might be equally important to supplement your neat idea with a proper visualization; my experience says that a great tool or a service attracts audience way better when it is wrapped in a shiny package. So having a prototyped web UI might give you some bonus points even if it is not going to be consumed via the Web UI after all.&lt;/p&gt;&lt;h3&gt;1.3 Learn how they do it on the other side of a fence&lt;/h3&gt;&lt;p&gt;A classic, book-pictured network automation engineer is an all Python-shop customer. Although Python is a natural fit for the network automation activities, it is also important to not less yourself be constrained by a singe language or a toolchain.&lt;/p&gt;&lt;p&gt;Educating yourself on a different technology with a different set of the instruments and/or the views means a lot. Even by scratching the surface of the Javascript, its package managers and the front-end frameworks could make you better understand the pros and cons of the ecosystem you are in.&lt;/p&gt;&lt;h2&gt;2 Front-end &amp;amp; Javascript frameworks&lt;/h2&gt;&lt;p&gt;&lt;img alt=&#34;pic&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/6e95f9e54f4062d13e314fc1b4d78266/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;So how do one start if they want to learn any of that shiny front-end witchery given that there are so many frameworks around? In spite to answer this question I compiled the following list of options that when I approached the task of making a &lt;a href=&#34;https://pycatjify.netdevops.me&#34;&gt;&lt;code&gt;pycatjify&lt;/code&gt;&lt;/a&gt; web service:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Frameworkless: bare HTML/CSS/JS&lt;/strong&gt;&lt;br&gt;This is the most straightforward way of creating a web service. You basically write everything by yourself without relying on any framework.&lt;br&gt;On the &lt;em&gt;pros&lt;/em&gt; side this is the most lightweight and bloat-less approach, as you are in the full control of what contributes to the end result.&lt;br&gt;The &lt;em&gt;cons&lt;/em&gt; side is substantial though, you need to be well experienced in the HTML/CSS/JS to create something less minimalistic than a blank page with the elements on it.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;strong&gt;Front-end frameworks&lt;/strong&gt;&lt;br&gt;Front-end frameworks provide a shortcut for a web service creation drastically reducing time to create one. Also known as CSS frameworks they come across with the lego-like blocks (components implemented with CSS/JS/HTML) that you use to build a web service from.&lt;br&gt;Dozens of front-end frameworks have been created over the time, from the minimalistic ones to the monstrous software bundles.&lt;br&gt;&lt;a href=&#34;https://getbootstrap.com&#34;&gt;Bootstrap&lt;/a&gt;, &lt;a href=&#34;https://foundation.zurb.com/&#34;&gt;Foundation&lt;/a&gt;, &lt;a href=&#34;http://getskeleton.com/&#34;&gt;Skeleton&lt;/a&gt;, [Materialize](https://materializecs...&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;</description><link>https://netdevops.me/2019/creating-a-bootstrap-based-front-end-for-your-simple-rest-service/</link> <pubDate>Fri, 09 Dec 2022 09:33:33 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2019/creating-a-bootstrap-based-front-end-for-your-simple-rest-service/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2019/creating-a-bootstrap-based-front-end-for-your-simple-rest-service/</guid> </item> <item> <title>SR Linux, JSON-RPC and Ansible</title> <author>rdodin</author> <category>ansible</category> <category>json-rpc</category> <category>srlinux</category> <description>&lt;h1&gt;SR Linux, JSON-RPC and Ansible&lt;/h1&gt;&lt;p&gt;This week I have authored two tutorials for our &lt;a href=&#34;https://learn.srlinux.dev&#34;&gt;https://learn.srlinux.dev&lt;/a&gt; portal.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://learn.srlinux.dev/tutorials/programmability/json-rpc/basics/&#34;&gt;JSON-RPC Basics&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://learn.srlinux.dev/tutorials/programmability/json-rpc/ansible/&#34;&gt;Using Ansible with SR Linux&#39;s JSON-RPC Interface&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The prime reason for this deep dive was to help our customers marry Ansible automation platform with network operations on SR Linux NOS. While I am personally not in the camp &#34;Ansible for network automation&#34; users, the reality is that it is still used by many small/mid teams who by now have large collections of playbooks and trained engineers.&lt;/p&gt;</description><link>https://netdevops.me/2022/sr-linux-json-rpc-and-ansible/</link> <pubDate>Fri, 09 Dec 2022 09:08:03 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2022/sr-linux-json-rpc-and-ansible/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2022/sr-linux-json-rpc-and-ansible/</guid> </item> <item> <title>Building and publishing deb/rpm packages with goreleaser and gemfury</title> <author>rdodin</author> <category>apt</category> <category>gemfury</category> <category>goreleaser</category> <category>yum</category> <description>&lt;h1&gt;Building and publishing deb/rpm packages with goreleaser and gemfury&lt;/h1&gt;&lt;p&gt;I am a huge fan of a &lt;a href=&#34;https://goreleaser.com/&#34;&gt;goreleaser&lt;/a&gt; tool that enables users to build Go projects and package/publish build artifacts in a fully automated and highly customizable way. We&#39;ve have been using goreleaser with all our recent projects and we couldn&#39;t be any happier since then.&lt;/p&gt;&lt;p&gt;But once the artifacts are built and published, the next important step is to make them easily installable. Especially if you provide deb/rpm packages which are built with &lt;a href=&#34;https://goreleaser.com/customization/nfpm/&#34;&gt;NFPM integration&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;The &#34;challenge&#34; with deb/rpm packages comes to light when project owners want to add those packages to Apt/Yum repositories. Goreleaser doesn&#39;t provide any integrations with 3rd party repositories nor there are Apt/Yum repositories which are free and provide an API to upload artifacts. Or are there?&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;Gemfury aka Fury.io&lt;/h2&gt;&lt;p&gt;Actually there is at least one - the &lt;a href=&#34;https://gemfury.com/&#34;&gt;gemfury.io&lt;/a&gt; project that does just that (and even more).&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;fury&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/f329ec478f16c4b2c0dce0108a51be75/image.png&#34;&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Gemfury is a private package repository to help you easily reuse code without worrying about its hosting or deployment. It integrates directly with existing package management tools that you already use.&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;Among other repositories, Fury provides a Yum/Apt repo for pre-built deb/rpm packages. It is free for public packages, which makes it a good choice for OSS projects. It also sports a hefty number of options to upload artifacts, from a simple &lt;code&gt;curl&lt;/code&gt; to a push via its own CLI tool.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;upload&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/9d85417c6db94401967e1a4e7d342354/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;Just register within the service and generate a &lt;a href=&#34;https://gemfury.com/help/tokens/#push-tokens-to-upload-packages&#34;&gt;push token&lt;/a&gt;, and you are good to go leveraging Goreleaser to push your artifacts to Fury.&lt;/p&gt;&lt;h2&gt;Using Goreleaser with Fury&lt;/h2&gt;&lt;h4&gt;Step 1: Adding Fury&#39; token&lt;/h4&gt;&lt;p&gt;Once you have a Fury&#39; push token, it is a matter of a few lines of code on the Goreleaser side.&lt;/p&gt;&lt;p&gt;I am using Goreleaser&#39; Github action to build and publish artifacts, therefore I added push token to repo&#39;s secrets and added it as another environment variable of a goreleaser action:&lt;/p&gt;&lt;p&gt;```yaml&lt;/p&gt;&lt;h1&gt;github action workflow file&lt;/h1&gt;&lt;hr&gt;&lt;p&gt;name: Releaseon: push: tags: - v*jobs: goreleaser: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v2 with: fetch-depth: 0 - name: Set up Go uses: actions/setup-go@v2 with: go-version: 1.15 - name: Run GoReleaser uses: goreleaser/goreleaser-action@v2 with: version: v0.155.0 args: release --rm-dist env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} FURY_TOKEN: ${{ secrets.FURYPUSHTOKEN }}```&lt;/p&gt;&lt;p&gt;This will make our &lt;code&gt;FURYPUSHTOKEN&lt;/code&gt; secret value to be available inside the Goreleaser&#39; Env vars under the &lt;code&gt;FURY_TOKEN&lt;/code&gt; name.&lt;/p&gt;&lt;h4&gt;Step 2: Add ID for NFPM builds&lt;/h4&gt;&lt;p&gt;In the &lt;code&gt;nfpm&lt;/code&gt; section of your &lt;code&gt;.goreleaser.yml&lt;/code&gt; file add &lt;code&gt;id&lt;/code&gt; field. This identification string will be used in Step 3 to scope which artifacts will be pushed to Fury. Since Fury will be used exclusively for dep/rpm artifacts, by using the &lt;code&gt;id&lt;/code&gt; related to them we will skip artifacts which are generated in the &lt;code&gt;build&lt;/code&gt; section of goreleaser (aka archives).&lt;/p&gt;&lt;p&gt;```yaml&lt;/p&gt;&lt;h1&gt;.goreleaser.yml file&lt;/h1&gt;&lt;p&gt;&lt;SNIP&gt;nfpms: - id: packages # here we say that artifacts built with nfpm will be identified with &lt;code&gt;packages&lt;/code&gt; string. file_name_template: &#34;{{ .ProjectName }}&lt;em&gt;{{ .Version }}&lt;/em&gt;{{ .Os }}_{{ .Arch }}&#34;&lt;SNIP&gt;```&lt;/p&gt;&lt;h4&gt;Step 3: Add custom publisher&lt;/h4&gt;&lt;p&gt;Now we need to tell Goreleaser to actually push those deb/rpm files it produced to a Fury repo. This is easily done with the &lt;a href=&#34;https://goreleaser.com/customization/publishers/&#34;&gt;custom publishers&lt;/a&gt; feature.&lt;/p&gt;&lt;p&gt;&lt;code&gt;yamlpublishers: - name: fury.io # by specifying `packages` id here goreleaser will only use this publisher # with artifacts identified by this id ids: - packages dir: &#34;{{ dir .ArtifactPath }}&#34; cmd: curl -F package=@{{ .ArtifactName }} https://{{ .Env.FURY_TOKEN }}@push.fury.io/&amp;lt;your_username&amp;gt;/ #(1)!&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Do not forget to fill in your user name.&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Look how easy it is. Now on every goreleaser&#39; build, artifacts from nfpm will be concurrently uploaded to Fury and immediately available to the users of those Apt/Yum repositories. Do note, that by default pushed artifacts have a private scope, so don&#39;t forget to visit Fury&#39; account dashboard and make them public.&lt;/p&gt;&lt;p&gt;Did I say that Goreleaser is a great tool? I bet I did, so consider supporting it if you have a chance.&lt;/p&gt;</description><link>https://netdevops.me/2021/building-and-publishing-debrpm-packages-with-goreleaser-and-gemfury/</link> <pubDate>Sat, 19 Nov 2022 18:43:07 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2021/building-and-publishing-debrpm-packages-with-goreleaser-and-gemfury/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2021/building-and-publishing-debrpm-packages-with-goreleaser-and-gemfury/</guid> </item> <item> <title>Nokia SR Linux goes public</title> <author>rdodin</author> <category>containerlab</category> <category>nokia</category> <category>srlinux</category> <description>&lt;h1&gt;Nokia SR Linux goes public&lt;/h1&gt;&lt;p&gt;It&#39;s been almost two years since Nokia announced its &lt;a href=&#34;https://www.nokia.com/networks/solutions/data-center-switching-fabric/&#34;&gt;Data Center Fabric solution&lt;/a&gt;. The three-layered solution ranged from hardware platforms all the way up in the stack to the DC fabric lifecycle management suite - &lt;a href=&#34;https://www.nokia.com/networks/products/fabric-services-system/&#34;&gt;Fabric Services System (FSS)&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;pic1&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/25f1ebe301b17296975c165fc2889d2a/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;At the very heart of the DC Fabric solution lies a purpose-built, modern Network OS - &lt;a href=&#34;https://www.nokia.com/networks/products/service-router-linux-NOS/&#34;&gt;SR Linux&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/96e2a0b880aede62dbaf1152608d6119/image.png&#34;&gt;&lt;img alt=&#34;pic2&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/96e2a0b880aede62dbaf1152608d6119/image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;SR Linux comes with quite some interesting and innovative ideas. By being able to design the NOS from the ground up, the product team was freed from the legacy burdens which will be there have they decided to built the NOS on top of the existing one. Features like:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;YANG-first APIs&lt;/li&gt;&lt;li&gt;Protobuf based SDK&lt;/li&gt;&lt;li&gt;Disaggregated application stack&lt;/li&gt;&lt;li&gt;Programmable CLI&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;are the result of taking a fresh look at the modern data center networks and building the NOS for the Netdevops era.&lt;/p&gt;&lt;p&gt;No wonders engineers around the world wanted to play with SR Linux and take those features for a spin first hand. And today it is finally possible!&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;Public SR Linux container&lt;/h2&gt;&lt;p&gt;I am a firm believer that Network Operating Systems should be available for testing to everybody. The reality, unfortunately, is quite different, with vendors either not allowing you to download virtual NOS at all, or requiring you to have an account, a registration with their system or a license file to run it.&lt;/p&gt;&lt;p&gt;With SR Linux, we are making a big step into the openness by pushing SR Linux container to the &lt;a href=&#34;https://github.com/orgs/nokia/packages/container/package/srlinux&#34;&gt;public container registry&lt;/a&gt; so everyone can it pull without any registration, payments, or active service accounts. Absolutely free and open.&lt;/p&gt;&lt;p&gt;&lt;code&gt;bashdocker pull ghcr.io/nokia/srlinux&lt;/code&gt;&lt;/p&gt;&lt;h3&gt;Running light&lt;/h3&gt;&lt;p&gt;Containerized NOSes have a lot of benefits that come from the container packaging. One of them being lightweight compared to the VM-based counterparts.&lt;/p&gt;&lt;p&gt;On average, a single SR Linux container will consume about 0.5vCPU and ~1GB RAM[^2]. That allows you to spin up labs of decent size having only an entry-level VM at your disposal.&lt;/p&gt;&lt;p&gt;For example, one of the most typical labs is a Clos fabric with a few leafs and spines. The lab like that will fit into 2vCPU and 6GB RAM VM.&lt;/p&gt;&lt;div class=&#34;mxgraph&#34; style=&#34;max-width:100%;border:1px solid transparent;margin:0 auto; display:block;&#34; data-mxgraph=&#34;{&amp;quot;page&amp;quot;:15,&amp;quot;zoom&amp;quot;:1.5,&amp;quot;highlight&amp;quot;:&amp;quot;#0000ff&amp;quot;,&amp;quot;nav&amp;quot;:true,&amp;quot;check-visible-state&amp;quot;:true,&amp;quot;resize&amp;quot;:true,&amp;quot;url&amp;quot;:&amp;quot;https://raw.githubusercontent.com/srl-wim/container-lab/diagrams/containerlab.drawio&amp;quot;}&#34;&gt;&lt;/div&gt;&lt;p&gt;You can even run this lab on a free Github Actions runner, which has 8GB RAM. Imagine the sheer possibilities in writing CI pipelines for testing your DC features which can run in the public cloud for free.&lt;/p&gt;&lt;h3&gt;Full feature parity&lt;/h3&gt;&lt;p&gt;When working with virtual networking products one needs to be aware of any limitations the virtual appliance imposes. Quite often the virtual images we work with in labs are crippled both in dataplane and control plane functions.&lt;/p&gt;&lt;p&gt;These limitations of the virtual images make it hard to create a reliable and &#34;real&#34; automated testing pipeline.&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;When you say vNOS, do you mean as a separate standalone product or as a virtual version of an image that will be sold to run on hardware only?&lt;/p&gt;&amp;mdash; Joe Neville 🌻 (@joeneville_) &lt;a href=&#34;https://twitter.com/joeneville_/status/1417855086076760066?ref_src=twsrc%5Etfw&#34;&gt;July 21, 2021&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;SR Linux container has the same code inside that actually runs on our hardware platforms. There is no control or data plane deviations[^1], so by using this image in your CI pipelines you can be sure that when deployed to production, it will behave the same.&lt;/p&gt;&lt;p&gt;And all that with a small resource footprint. Imagine running a fully functional 3-stage mini-Clos fabric with 6 nodes on a machine with 2vCPU and 6GB RAM? That will fit into a free GitHub runner!&lt;/p&gt;&lt;h3&gt;No license strings attached&lt;/h3&gt;&lt;p&gt;Being able to pull SR Linux NOS as any other container image is big on its own, but we also wanted to make sure that you can use right away. To do that, we made licensing optional, so once you pulled an image you can use it to its full extent!&lt;/p&gt;&lt;p&gt;!!!info When running without a license users can enjoy all the features of SR Linux, but dataplane i...&lt;/p&gt;</description><link>https://netdevops.me/2021/nokia-sr-linux-goes-public/</link> <pubDate>Fri, 04 Nov 2022 12:38:51 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2021/nokia-sr-linux-goes-public/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2021/nokia-sr-linux-goes-public/</guid> </item> <item> <title>gNMIc - gNMI CLI client and collector</title> <author>rdodin</author> <category>gnmi</category> <category>gnmic</category> <category>go</category> <category>openconfig</category> <description>&lt;h1&gt;gNMIc - gNMI CLI client and collector&lt;/h1&gt;&lt;p&gt;Despite the fact that &lt;a href=&#34;https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md&#34;&gt;gNMI&lt;/a&gt; is defacto the go-to interface for a model-driven telemetry collection, we, as a community, had no gNMI tool that was easy to install, pleasure to use, documented and pre-built for common platforms. Until now.&lt;/p&gt;&lt;p&gt;I am excited to announce the public release of &lt;a href=&#34;https://gnmic.kmrd.dev/&#34;&gt;&lt;code&gt;gnmic&lt;/code&gt;&lt;/a&gt; - a CLI client and a collector that talks gNMI to your devices.&lt;/p&gt;&lt;p&gt;!!!tip &lt;strong&gt;October 2022:&lt;/strong&gt; &lt;a href=&#34;../2022/gnmic-openconfig.md&#34;&gt;gNMIc has joined Openconfig&lt;/a&gt;.&lt;/p&gt;&lt;!-- more --&gt;&lt;h3&gt;Problem statement&lt;/h3&gt;&lt;p&gt;I am not exaggerating, there is a shortage of open source gNMI clients one can find. And when I say gNMI clients I mean the CLI clients that allow you to invoke gNMI service RPCs.&lt;/p&gt;&lt;p&gt;Earlier this year I bragged about it, in hope that my google-foo is just broken and the community knows of a gNMI client that I could download and use right away without jumping through hoops:&lt;/p&gt;&lt;p&gt;&lt;center&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;So coming back to the OpenConfig/gNMI and what a hot mess it is when it comes to the tooling.&lt;br&gt;&lt;br&gt;You would probably think that there is a top-notch gNMI CLI (or even a shell) for you to query your routers like a pro.&lt;/p&gt;&amp;mdash; Roman Dodin (@ntdvps) &lt;a href=&#34;https://twitter.com/ntdvps/status/1229845496660922368?ref_src=twsrc%5Etfw&#34;&gt;February 18, 2020&lt;/a&gt;&lt;/blockquote&gt; &lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/center&gt;&lt;/p&gt;&lt;p&gt;But that was not my google-foo, unfortunately. For the sake of completeness allow me to summarize the landscape of gNMI clients in a pre-gnmic era:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/openconfig/gnmi&#34;&gt;OpenConfig gNMI CLI client&lt;/a&gt; - thats the google search top result one gets when looking for gNMI client. A reference implementation which lacks some essential features:&lt;ul&gt;&lt;li&gt;no documentation, no &lt;a href=&#34;https://github.com/openconfig/gnmi/issues/7&#34;&gt;usage examples&lt;/a&gt; - you really better know how to read Go code to understand how to use it.&lt;/li&gt;&lt;li&gt;Get requests will require you to &lt;a href=&#34;https://github.com/openconfig/gnmi/issues/67&#34;&gt;write in proto&lt;/a&gt; syntax instead of a simple &lt;code&gt;get&lt;/code&gt; command with a path.&lt;/li&gt;&lt;li&gt;additional options like Encoding, Models are not exposed via flags.&lt;/li&gt;&lt;li&gt;no ready-made binaries - you need to have a Go tool chain to build the tool.&lt;/li&gt;&lt;li&gt;no &lt;em&gt;insecure&lt;/em&gt; support - you can kiss goodbye your lab installations without PKI.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/google/gnxi&#34;&gt;Google gnxi&lt;/a&gt; - Googles gNxI tools that include gNMI, gNOI.&lt;ul&gt;&lt;li&gt;the gNMI RPCs are split to different CLI tools which is not convenient&lt;/li&gt;&lt;li&gt;a list of flags is all you got when it comes to documentation&lt;/li&gt;&lt;li&gt;no releases to download, Go toolchain is needed&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/cisco-ie/cisco-gnmi-python#cli-usage&#34;&gt;cisco-gnmi-python&lt;/a&gt; - a Cisco Innovative Edge project that is quite decent and complete, good job! But a few improvements could have been made:&lt;ul&gt;&lt;li&gt;client doesn&#39;t allow to use insecure gRPC transport, PKI is mandatory.&lt;/li&gt;&lt;li&gt;Set requests can&#39;t set values specified on the command line.&lt;/li&gt;&lt;li&gt;CLI structure is not consistent across the commands&lt;/li&gt;&lt;li&gt;No option exposed to set the Subscription mode.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/influxdata/telegraf&#34;&gt;Telegraf&lt;/a&gt; and &lt;a href=&#34;https://github.com/nokia/ansible-networking-collections/tree/master/grpc&#34;&gt;Ansible gNMI module&lt;/a&gt; are not qualified to be considered as CLI tools.&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;What makes gNMI tool nice to use?&lt;/h3&gt;&lt;p&gt;Looking at this landscape, the following essential features a nice gNMI client should have come to mind:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;provide a clean and vendor independent interface to gNMI RPCs&lt;/li&gt;&lt;li&gt;expose all configuration options the gNMI RPCs have via flags or file-based configurations&lt;/li&gt;&lt;li&gt;allow multi-target operations: i.e. a subscription made to a number of the devices&lt;/li&gt;&lt;li&gt;implement both TLS enabled and non-secure transport&lt;/li&gt;&lt;li&gt;support different output formats (JSON, proto) and destinations (stdout, file, streaming/messaging buses)&lt;/li&gt;&lt;li&gt;be documented&lt;/li&gt;&lt;li&gt;provide an easy way to install the tool without requiring a dev toolchain to be present.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;With these essential features in mind we started to work on &lt;a href=&#34;https://gnmic.kmrd.dev/&#34;&gt;gnmic&lt;/a&gt;.&lt;/p&gt;&lt;h3&gt;gNMIc and its features&lt;/h3&gt;&lt;p align=center&gt;&lt;img src=https://gitlab.com/rdodin/pics/-/wikis/uploads/46e7d1631bd5569e9bf289be9dfa3812/gnmic-headline.svg?sanitize=true/&gt;&lt;/p&gt;&lt;p&gt;The work on &lt;code&gt;gnmic&lt;/code&gt; started with analysis of the existing tools shortcomings coupled with collecting requirements from our fellow engineers and our past user experience.&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;For the &lt;code&gt;gnmic&lt;/code&gt; features run down go to our beautiful documentation portal - &lt;a href=&#34;https://gnmic.kmrd.dev&#34;&gt;https://gnmic.kmrd.dev&lt;/a&gt;. In this post I will go a bit deeper on some core features and design choices we made, so please refer to the documentation if you are looking for a basic usage or command reference guide.&lt;/p&gt;&lt;/blockquote&gt;&lt;h4&gt;Consistent command line interface&lt;/h4&gt;&lt;p&gt;It is easy to spot a CLI tool that got some love from its developers by looking at the way it is composed. Since most of the &lt;code&gt;gnmic&lt;/code&gt; users will ...&lt;/p&gt;</description><link>https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/</link> <pubDate>Tue, 11 Oct 2022 14:39:10 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/</guid> </item> <item> <title>Nokia YANG tree and Path Browser</title> <author>rdodin</author> <category>nokia</category> <category>sr os</category> <category>yang</category> <description>&lt;h1&gt;Nokia YANG tree and Path Browser&lt;/h1&gt;&lt;p&gt;&lt;em&gt;Automation Is as Good as the Data Models&lt;/em&gt; is a chapter&#39;s name in the great book titled &lt;a href=&#34;https://www.amazon.com/Network-Programmability-YANG-Modeling-driven-Management/dp/0135180392&#34;&gt;&#34;Network Programmability With YANG&#34;&lt;/a&gt;. These days you won&#39;t bedazzle anyone by just providing the set of YANG models for the flagship network products. The models alone, albeit a great step forward, do not guarantee that programmability will start flourish.&lt;br&gt;The automation tools leveraging YANG is often a missing link and in this post I am talking about the &lt;a href=&#34;https://github.com/hellt/nokia-yangtree&#34;&gt;Nokia YANG tree and Path Browser&lt;/a&gt; tools which help both our internal automation squad and our customers to be more effective working with our YANG models.&lt;/p&gt;&lt;!-- more --&gt;&lt;h2&gt;1 Models for machines&lt;/h2&gt;&lt;p&gt;At Nokia we distribute the YANG models via our &lt;a href=&#34;https://github.com/nokia/7x50_YangModels&#34;&gt;nokia/7x50_YangModels&lt;/a&gt; repository. This enables us to allow users to simplify the way they get the models. The challenge with these models, or any models provided in &lt;code&gt;.yang&lt;/code&gt; format for that matter, is that its extremely hard for a naked eye to browse/evaluate these models when doing network automation. They are great for compilers, and not as much for us - automation engineers.&lt;/p&gt;&lt;p&gt;&lt;code&gt;cpp// first lines of ietf-interfaces.yang modulemodule ietf-interfaces { yang-version 1.1; namespace &#34;urn:ietf:params:xml:ns:yang:ietf-interfaces&#34;; import ietf-yang-types { prefix yang; } revision 2018-02-20; container interfaces { description &#34;Interface parameters.&#34;; list interface { key &#34;name&#34;; leaf name { type string; } leaf description { type string; } leaf enabled { type boolean; default &#34;true&#34;; }&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Likely, browsing the &lt;a href=&#34;https://github.com/YangModels/yang/blob/master/standard/ietf/RFC/ietf-interfaces%402018-02-20.yang&#34;&gt;&lt;code&gt;ietf-interfaces.yang&lt;/code&gt;&lt;/a&gt; file won&#39;t make you sweat, yet it shouldn&#39;t led you to a false conclusion that YANG code representation is easy. The reality hits hard when YANG exposes its features such as &lt;code&gt;groupings&lt;/code&gt; and &lt;code&gt;uses&lt;/code&gt;, custom &lt;code&gt;typedefs&lt;/code&gt; and multiple &lt;code&gt;identityrefs&lt;/code&gt;, solid layer of &lt;code&gt;XPATH&lt;/code&gt; here and there, twisted &lt;code&gt;imports&lt;/code&gt; and a composition with dozens of &lt;code&gt;submodules&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;For example, our combined model for the configuration-only data (&lt;a href=&#34;https://raw.githubusercontent.com/nokia/7x50_YangModels/master/latest_sros_20.2/nokia-combined/nokia-conf-combined.yang&#34;&gt;nokia-conf-combined.yang&lt;/a&gt;) is 15MB in size and has 331000 lines. That is like the opposite of &lt;em&gt;easy&lt;/em&gt;. But why is it important to peer inside the models in the first place?&lt;/p&gt;&lt;h3&gt;1.1 Why browsing models is important?&lt;/h3&gt;&lt;p&gt;Truth is that every model driven (MD) interface you have in mind such as NETCONF, gNMI, RESTCONF operates on the data that is modelled in YANG. Thus every single operation you make with these interfaces eventually aligned with the underlying YANG model to access the data.&lt;/p&gt;&lt;p&gt;And unless your automation suite leverages some advanced orchestrator-provided abstractions or code generated classes, you literally &lt;strong&gt;need to look&lt;/strong&gt; at the YANG modules when using those management interfaces.&lt;/p&gt;&lt;ol&gt;&lt;li&gt;NETCONF operations must have the XML envelopes created in conformance with the YANG model (&lt;a href=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/45fd09db73543f94f6937655db3f70ff/image.png&#34;&gt;example&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;gNMI paths are XPATH-like paths modelled after the underlying YANG model (&lt;a href=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/789429d8fec1d721e04d6024df5f883b/image.png&#34;&gt;example&lt;/a&gt;)&lt;/li&gt;&lt;li&gt;RESTCONF URL embeds a model path as dictated by the YANG model (&lt;a href=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/1b9d45fd859ee7a66f382bab0f02621c/image.png&#34;&gt;example&lt;/a&gt;)&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;2 YANG representations&lt;/h2&gt;&lt;p&gt;Make no mistake: regardless of the interface you pick, you end browsing YANG models and as you can imagine, scrambling through the raw YANG model representation is not an easy task. Luckily, the better looking representations of the very same models exist.&lt;/p&gt;&lt;h3&gt;2.1 Tree&lt;/h3&gt;&lt;p&gt;The &lt;a href=&#34;https://tools.ietf.org/html/rfc8340&#34;&gt;RFC8340 YANG tree&lt;/a&gt; representation is the one you see everywhere in the documentation and blogs. By passing the same &lt;code&gt;ietf-interfaces.yang&lt;/code&gt; snippet through the &lt;code&gt;pyang&lt;/code&gt; tool we transform the module to a better looking tree-like view:&lt;/p&gt;&lt;p&gt;&lt;code&gt;txt+--rw interfaces | +--rw interface* [name] | +--rw name string | +--rw description? string | +--rw type identityref | +--rw enabled? boolean&lt;/code&gt;&lt;/p&gt;&lt;p&gt;Compared to the &lt;code&gt;.yang&lt;/code&gt; raw view, the &lt;em&gt;tree&lt;/em&gt; makes it way easier to glance over the model and understand the parent-child relationships of the data entry nodes and their types.&lt;/p&gt;&lt;p&gt;Still, it has some serious UX drawbacks an engineer will face:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;strong&gt;the path information is missing.&lt;/strong&gt; By looking at a certain leaf/container/list of a tree you can&#39;t easily say what is the path of that element starting from the root?&lt;br&gt; Yet it is ve...&lt;/li&gt;&lt;/ul&gt;</description><link>https://netdevops.me/2020/nokia-yang-tree-and-path-browser/</link> <pubDate>Tue, 11 Oct 2022 08:11:53 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2020/nokia-yang-tree-and-path-browser/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2020/nokia-yang-tree-and-path-browser/</guid> </item> <item> <title>How to patch Ubuntu 20.04 Focal Fossa with UKSM?</title> <author>rdodin</author> <category>ubuntu</category> <category>uksm</category> <description>&lt;h1&gt;How to patch Ubuntu 20.04 Focal Fossa with UKSM?&lt;/h1&gt;&lt;p&gt;Running multiple VMs out of the same disk image is something we, network engineers, do quite often. A virtualized network usually consists of a few identical virtualized network elements that we interconnected with links making a topology.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;topo&#34; src=&#34;https://img-fotki.yandex.ru/get/6605/21639405.11c/0_86301_84e43902_orig.png&#34;&gt;&lt;/p&gt;&lt;p&gt;In the example above we have 7 virtualized routers in total, although we used only two VM images to create this topology (virtualized Nokia router and it&#39;s Juniper vMX counterpart). Each of this VMs require some memory to run, for the simplicity, lets say each VM requires 5GB of RAM.&lt;/p&gt;&lt;p&gt;So roughly, the above topology will claim 30-35GB of RAM in order to operate. Enriching the topology by adding more VMs of the same type will continue to push for more memory, thus running big topologies often becomes an exercise of hunting for RAM.&lt;/p&gt;&lt;p&gt;Luckily, there are technologies like Kernel Same Merging (KSM) and it&#39;s enhanced version Ultra-KSM (UKSM) that are able to lift the memory requirement for use cases like above. In a nutshell, they allow to merge mem pages of the same content, effectively reusing the same memory pages between virtual machines.&lt;/p&gt;&lt;!-- more --&gt;&lt;p&gt;!!!info &#34;from &lt;a href=&#34;https://www.usenix.org/system/files/conference/fast18/fast18-xia.pdf&#34;&gt;UKSM usenix paper&lt;/a&gt;&#34; Memory deduplication can reduce memory footprint by eliminating redundant pages. This is particularly true when similar OSes/applications/data are used across different VMs. Essentially, memory deduplication detects those redundant pages, and merges them by enabling transparent page sharing.&lt;/p&gt;&lt;p&gt;Although UKSM is not a silver bullet for every application and use case, it tends to be a very good fit for hypervisors used to run virtualized networking topologies. For that reason the EVE-NG network emulation platform embeds UKSM in their product.&lt;/p&gt;&lt;p&gt;So I decided to bring UKSM to my Ubuntu 20.04 VM that I use to launch virtualized routers and containers to witness the benefits/issues of having it.&lt;/p&gt;&lt;p&gt;&lt;img alt=&#34;uksm&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/5ac1a3e597d26fbf94d18e7d898e6a7c/image.png&#34;&gt;&lt;/p&gt;&lt;p&gt;The results look promising. Running 6 VMs with a system memory footprint of one is a solid memory optimization, especially considering that performance penalty is something we can bare in a lab where we mostly play with control plane features.&lt;/p&gt;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/55317652924b2ad3d083cf6719b5cd1e/image.png&#34;&gt;&lt;img alt=&#34;uksm-compare&#34; src=&#34;https://gitlab.com/rdodin/pics/-/wikis/uploads/55317652924b2ad3d083cf6719b5cd1e/image.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Now if you want to bring UKSM to your hypervisor you will need to jump through some hoops, as UKSM is a kernel feature that is not available as a module. This means that you need to build a kernel with UKSM enabled, and that might be a barrier too high for some of you. It was for me, until I spent a night trying multiple things until it worked, so let me share with you the process and the outcomes so that you can rip the benefits without having all the trouble of trial-and-error routine.&lt;/p&gt;&lt;h4&gt;0 TL;DR&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Download UKSM patches&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Download kernel source&lt;/p&gt;&lt;/li&gt;&lt;li&gt;Apply UKSM patch&lt;/li&gt;&lt;li&gt;Build kernel&lt;/li&gt;&lt;li&gt;Install kernel&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;1 Get UKSM patches&lt;/h2&gt;&lt;p&gt;As mentioned above, UKSM is a kernel feature and the way it is distributed nowadays is via &lt;code&gt;patch&lt;/code&gt; files that are available in &lt;a href=&#34;https://github.com/dolohow/uksm&#34;&gt;this Github repo&lt;/a&gt;. So our first step is cloning this repo to get the patches for recent (4.x and 5.x) kernels. Easy start.&lt;/p&gt;&lt;h2&gt;2 Get the kernel source code&lt;/h2&gt;&lt;p&gt;As the UKSM patches need to be applied to a kernel source code, we need to get one. Here things can get a tad complicated.&lt;/p&gt;&lt;p&gt;There are many different kernels out there:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;vanilla Linux kernels blessed by Linus himself&lt;/li&gt;&lt;li&gt;distribution kernels (Debian, Ubuntu, Fedora, etc)&lt;/li&gt;&lt;li&gt;third party kernels with the best hacks&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The UKSM patches were created against the vanilla Linux kernel, but my Ubuntu VM runs a kernel that was produced by Ubuntu team.&lt;/p&gt;&lt;p&gt;```bash&lt;/p&gt;&lt;h1&gt;on Ubuntu 20.04&lt;/h1&gt;&lt;p&gt;uname -aLinux kernel-build 5.4.0-48-generic #52-Ubuntu SMP Thu Sep 10 10:58:49 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux```&lt;/p&gt;&lt;p&gt;Vanilla linux kernel uses X.Y.Z versioning. If anything is appended after X.Y.Z (like &lt;code&gt;-48-generic&lt;/code&gt;) in my case, it indicates that the kernel comes from a distributor (Ubuntu in my case).&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;Things that didn&#39;t work:&lt;br&gt;1 At first I tried to download the original Linux kernel, but the build process failed without giving me a good explanation.&lt;br&gt;2 Download latest 5.4 kernel from Ubuntu - UKSM patch didn&#39;t apply, as the code has changed apparently&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;After multiple rinse-repeat iterations I found out that I can take the Ubuntu kernel &lt;code&gt;5.4.0-48.52&lt;/code&gt; as UKSM patch applies to it no problem and the build succeeds.&lt;/p&gt;&lt;p&gt;How did I get one? Oh, that is also something worth documenting, as the path to knowing it is paved with broken links and articles dated early 2000s. First, go [here](https://git.launchpad.net/~ubuntu-kernel/ubuntu/+source/linux/+git/fo...&lt;/p&gt;</description><link>https://netdevops.me/2021/how-to-patch-ubuntu-2004-focal-fossa-with-uksm/</link> <pubDate>Mon, 10 Oct 2022 13:25:35 +0000</pubDate><source url="https://netdevops.me/feed_rss_updated.xml">Applying DevOps to networks</source><comments>https://netdevops.me/2021/how-to-patch-ubuntu-2004-focal-fossa-with-uksm/#__comments</comments><guid isPermaLink="true">https://netdevops.me/2021/how-to-patch-ubuntu-2004-focal-fossa-with-uksm/</guid> </item> </channel></rss>