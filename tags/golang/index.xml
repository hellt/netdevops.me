<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Golang - Tag - NetDevOps</title><link>https://netdevops.me/tags/golang/</link><description>Golang - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 28 Jul 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/golang/" rel="self" type="application/rss+xml"/><item><title>How to make VS Code Go extension to work in your cloud folder on different platforms?</title><link>https://netdevops.me/2017/how-to-make-vs-code-go-extension-to-work-in-your-cloud-folder-on-different-platforms/</link><pubDate>Fri, 28 Jul 2017 00:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2017/how-to-make-vs-code-go-extension-to-work-in-your-cloud-folder-on-different-platforms/</guid><description>I started to play with Go aka Golang. Yeah, leaving the comfort zone, all that buzz. And for quite some time I&amp;rsquo;ve been engaged with VS Code whenever/wherever I did dev activities.
VS Code has a solid Go support via its official extension:
This extension adds rich language support for the Go language to VS Code, including:
Completion Lists (using gocode) Signature Help (using gogetdoc or godef+godoc) Quick Info (using gogetdoc or godef+godoc) Goto Definition (using gogetdoc or godef+godoc) Find References (using guru) File outline (using go-outline) Workspace symbol search (using go-symbols) Rename (using gorename) Build-on-save (using go build and go test) Lint-on-save (using golint or gometalinter) Format (using goreturns or goimports or gofmt) Generate unit tests skeleton (using gotests) Add Imports (using gopkgs) Add/Remove Tags on struct fields (using gomodifytags) Semantic/Syntactic error reporting as you type (using gotype-live) Mark that gotools in the brackets, these ones are powering all that extra functionality and got installed into your GOPATH once you install them via VS Code.</description></item></channel></rss>