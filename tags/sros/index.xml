<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>SROS - Tag - NetDevOps</title><link>https://netdevops.me/tags/sros/</link><description>SROS - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 29 Apr 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/sros/" rel="self" type="application/rss+xml"/><item><title>Nokia YANG tree and Path Browser</title><link>https://netdevops.me/nokia-yang-tree/</link><pubDate>Wed, 29 Apr 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/nokia-yang-tree/</guid><description><![CDATA[<p><em>Automation Is as Good as the Data Models</em> is a chapter&rsquo;s name in the great book titled <a href="https://www.amazon.com/Network-Programmability-YANG-Modeling-driven-Management/dp/0135180392" target="_blank" rel="noopener noreffer">&ldquo;Network Programmability With YANG&rdquo;</a>. These days you won&rsquo;t bedazzle anyone by just providing the set of YANG models for the flagship network products. The models alone, albeit a great step forward, do not guarantee that programmability will start flourish.<br>
The automation tools leveraging YANG is often a missing link and in this post I am talking about the <a href="https://github.com/hellt/nokia-yangtree" target="_blank" rel="noopener noreffer">Nokia YANG tree and Path Browser</a> tools which help both our internal automation squad and our customers to be more effective working with our YANG models.</p>]]></description></item><item><title>SROS Rootifier or how to flatten 7750 SR config</title><link>https://netdevops.me/2017/sros-rootifier-or-how-to-flatten-7750-sr-config/</link><pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2017/sros-rootifier-or-how-to-flatten-7750-sr-config/</guid><description><![CDATA[<p>Back in the days when I mostly did routing stuff I spent the whole day configuring SROS devices via SSH. And once in a while I saw that SSH session or its server part (or even underlying connection) glitched, resulting in a corrupted lines feeded to the device.</p>
<p>What was also quite common is to make a mistake (i.e. syntax one) in a single line and watch like the rest of config got applied to the wrong context.</p>
<p>These sad facts pushed me to create a <strong>rootifier</strong> CLI script, that was converting tree-like SROS config into flattented (aka rooted) fashion.</p>
<p>




</p>
<p>Now I decided to make a web service of that script, that is publicly available at <a href="http://rootifier.netdevops.me/">http://rootifier.netdevops.me/</a></p>]]></description></item><item><title>Nokia (Alcatel-Lucent) BGP configuration tutorial. Part 2 - Communities</title><link>https://netdevops.me/2015/09/alcatel-lucent-bgp-configuration-tutorial-part-2-bgp-policies-community/</link><pubDate>Wed, 23 Sep 2015 16:41:58 +0000</pubDate><author>Roman Dodin</author><guid>https://netdevops.me/2015/09/alcatel-lucent-bgp-configuration-tutorial-part-2-bgp-policies-community/</guid><description><![CDATA[<p>In the <a href="http://netdevops.me/2015/08/alcatel-lucent-bgp-configuration-tutorial-part-1-basic-ebgp-ibgp/" target="_blank" rel="noopener noreffer">first part of this BGP tutorial</a> we prepared the ground by configuring eBGP/iBGP peering. We did a good job overall, yet the <em>plain</em> BGP peering is not something you would not normally see in production. The power of BGP is in its ability for granular management of multiple routes from multiple sources. And the tools that help BGP to handle this complex task are BGP policies at their full glory.</p>
<p>In this part we will discuss and practice:</p>
<ul>
<li>BGP export/import policies for route advertisement/filtering</li>
<li>BGP communities operations</li>
<li>BGP routes aggregation: route summarization and the corresponding <code>aggregate</code> and <code>atomic-aggregate</code> path attributes</li>
</ul>]]></description></item><item><title>Nokia (Alcatel-Lucent) BGP configuration tutorial. Part 1 - basic eBGP, iBGP</title><link>https://netdevops.me/2015/08/alcatel-lucent-bgp-configuration-tutorial-part-1-basic-ebgp-ibgp/</link><pubDate>Mon, 24 Aug 2015 08:51:38 +0000</pubDate><author>Roman Dodin</author><guid>https://netdevops.me/2015/08/alcatel-lucent-bgp-configuration-tutorial-part-1-basic-ebgp-ibgp/</guid><description><![CDATA[<p>There is no way I would leave you without covering configuration steps for one of the most versatile, scalable and robust internet protocols also known as <strong>BGP</strong>. And here it is - BGP configuration guide for Nokia (Alcatel-Lucent) Service Routers.</p>
<p><a href="http://netdevops.me/2015/06/alcatel-lucent-ospf-configuration-tutorial/" target="_blank" rel="noopener noreffer">As with the OSPF configuration tutorial</a> I will cover the configuration process for various BGP scenarios along with the verification and troubleshooting steps bundled with colorful figures, detailed code snippets and useful remarks.</p>
<p>BGP is so huge that I had no other option but to write about it in several parts:</p>
<ul>
<li><strong>Part 1 - basic eBGP and iBGP configuration</strong></li>
<li><a href="http://netdevops.me/2015/09/alcatel-lucent-bgp-configuration-tutorial-part-2-bgp-policies-community/" target="_blank" rel="noopener noreffer">Part 2 - BGP policies. Community</a></li>
</ul>
<p>Part 1 is dedicated to basic eBGP/iBGP configuration. We will practice with common BGP configuration procedures at first, then learn how to export routes into BGP process and prevent unnecessary route reflection by means of <code>split-horizon</code> over eBGP links.</p>
<p>Next we go over iBGP configuration to spread the eBGP learned routes across the Autonomous Systems. I will explain the necessity of having a full-mesh iBGP topology and the use of the <code>next-hop-self</code> command for iBGP peers.</p>
<p>It&rsquo;s a perfect time to configure some BGP, right?</p>]]></description></item><item><title>Nokia (Alcatel-Lucent). Configuring Packet (IP) Filters</title><link>https://netdevops.me/2015/06/alcatel-lucent-configuring-packet-ip-filters/</link><pubDate>Wed, 24 Jun 2015 16:59:56 +0000</pubDate><author>Roman Dodin</author><guid>https://netdevops.me/2015/06/alcatel-lucent-configuring-packet-ip-filters/</guid><description><![CDATA[<p>Packet filters (or in Cisco terminology Access Control Lists, aka ACL) are one of the most used tools in a network engineer&rsquo;s tool set. Blocking telnet/ssh access, restricting specific traffic flows, implementing policy-based routing or NATing - all of these tasks use IP filter&rsquo;s capabilities.</p>
<p>In this example I&rsquo;ll show you how to configure a basic SSH-blocking IP filter on a Nokia (Alcatel-Lucent) SROS running <code>TiMOS-B-12.0.R8</code>.</p>]]></description></item><item><title>Nokia (Alcatel-Lucent) SROS OSPF configuration tutorial</title><link>https://netdevops.me/2015/06/alcatel-lucent-ospf-configuration-tutorial/</link><pubDate>Mon, 22 Jun 2015 18:45:53 +0000</pubDate><author>Roman Dodin</author><guid>https://netdevops.me/2015/06/alcatel-lucent-ospf-configuration-tutorial/</guid><description><![CDATA[<p>The purpose of this post is to cover basic <a href="https://tools.ietf.org/html/rfc2328" target="_blank" rel="noopener noreffer">OSPFv2</a> configuration steps and commands for Nokia SROS routers. Intended readers are engineers with basic OSPF knowledge who want to know how to configure OSPF on Alcatel-Lucent Service Routers (7750-SR, 7705-SR, 7210-SR).</p>
<p>All examples are valid for <code>TiMOS-B-12.0.R8</code> software.</p>]]></description></item></channel></rss>