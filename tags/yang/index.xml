<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>YANG - Tag - NetDevOps</title><link>https://netdevops.me/tags/yang/</link><description>YANG - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 26 Jan 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/yang/" rel="self" type="application/rss+xml"/><item><title>DIY YANG Browser</title><link>https://netdevops.me/2022/diy-yang-browser/</link><pubDate>Wed, 26 Jan 2022 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2022/diy-yang-browser/</guid><description>Here comes the second episode of the NetRel show: NetRel episode 002 - DIY YANG Browser. Be ready to dive into the paths we took to create a YANG Browser for Nokia SR Linux platform.
YANG data models are the map one should use when looking for their way to configure or retrieve any data on SR Linux system. A central role that is given to YANG in SR Linux demands a convenient interface to browse, search through, and process these data models.</description></item><item><title>gNMIc got better with YANG-completions</title><link>https://netdevops.me/2020/gnmic-got-better-with-yang-completions/</link><pubDate>Thu, 22 Oct 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/gnmic-got-better-with-yang-completions/</guid><description><![CDATA[<p><a href="https://gnmic.kmrd.dev" target="_blank" rel="noopener noreffer"><code>gnmic</code></a> was the first opensource project that I&rsquo;ve been part of that got widely adopted. As the maintainers of a public project, Karim and I were wondering when would we get the first external contribution.</p>
<p>To our surprise, the very <a href="https://github.com/karimra/gnmic/pull/136" target="_blank" rel="noopener noreffer">first external contribution</a> laid out the foundation to one of the most exciting features of <code>gnmic</code> - YANG-Completions.</p>]]></description></item><item><title>Arista vEOS gNMI Tutorial</title><link>https://netdevops.me/2020/arista-veos-gnmi-tutorial/</link><pubDate>Sat, 25 Jul 2020 07:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/arista-veos-gnmi-tutorial/</guid><description><![CDATA[<p>We were pleasantly surprised by the way community appreciated <a href="https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/" target="_blank" rel="noopener noreffer">gNMIc</a> release. Thank you üôè! That solidifies the fact that a well-formed, documented and easy to use gNMI tool was needed.</p>
<p>Now with gNMIc available to everybody its easy like never before to test gNMI implementation of different routing OSes. And in this post we will get our hands on <strong>Arista vEOS</strong>.</p>]]></description></item><item><title>Nokia YANG tree and Path Browser</title><link>https://netdevops.me/nokia-yang-tree/</link><pubDate>Wed, 29 Apr 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/nokia-yang-tree/</guid><description><![CDATA[<p><em>Automation Is as Good as the Data Models</em> is a chapter&rsquo;s name in the great book titled <a href="https://www.amazon.com/Network-Programmability-YANG-Modeling-driven-Management/dp/0135180392" target="_blank" rel="noopener noreffer">&ldquo;Network Programmability With YANG&rdquo;</a>. These days you won&rsquo;t bedazzle anyone by just providing the set of YANG models for the flagship network products. The models alone, albeit a great step forward, do not guarantee that programmability will start flourish.<br>
The automation tools leveraging YANG is often a missing link and in this post I am talking about the <a href="https://github.com/hellt/nokia-yangtree" target="_blank" rel="noopener noreffer">Nokia YANG tree and Path Browser</a> tools which help both our internal automation squad and our customers to be more effective working with our YANG models.</p>]]></description></item><item><title>Getting XML data sample for a given leaf in a YANG model</title><link>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</link><pubDate>Sat, 01 Feb 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</guid><description><![CDATA[<p>We can praise YANG as long as we want, but for an end user YANG is useful as the tooling around it and the applications leveraging it. Ask yourself, as a user of any kind of NETCONF/YANG application what was the last time you looked at a <code>*.yang</code> file content and found something that was needed to consume that application?<br>
In a user role I personally never look at a YANG source, though, I look at the tree or HTML representation of YANG all the time; Thats is the YANG human interface for me.</p>
<p>And even in these human friendly formats you can&rsquo;t find all the answers; for example, looking at the YANG tree, how do you get the XML data sample of a given leaf? Thats what we will discover in this post.</p>]]></description></item><item><title>Yang Explorer in a docker container based on Alpine</title><link>https://netdevops.me/2017/yang-explorer-in-a-docker-container-based-on-alpine/</link><pubDate>Thu, 10 Aug 2017 12:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2017/yang-explorer-in-a-docker-container-based-on-alpine/</guid><description><![CDATA[<p>I wrote about the Yang Explorer in a docker quite some time ago, Yang Explorer was v0.6 at that time. Back then the motivation to create a docker image was pretty simple &ndash; installation was a pain in <strong>v0.6</strong>, it is still a pain, but the official version bumped to <strong>0.8(beta)</strong>.</p>
<p>So I decided to re-build <a href="https://hub.docker.com/r/hellt/yangexplorer-docker/" target="_blank" rel="noopener noreffer">an image</a>, now using Alpine Linux as a base image to reduce the size.</p>]]></description></item></channel></rss>