<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Docker - Tag - NetDevOps</title><link>https://netdevops.me/tags/docker/</link><description>Docker - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 01 Feb 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/docker/" rel="self" type="application/rss+xml"/><item><title>Getting XML data sample for a given leaf in a YANG model</title><link>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</link><pubDate>Sat, 01 Feb 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</guid><description><![CDATA[<p>We can praise YANG as long as we want, but for an end user YANG is useful as the tooling around it and the applications leveraging it. Ask yourself, as a user of any kind of NETCONF/YANG application what was the last time you looked at a <code>*.yang</code> file content and found something that was needed to consume that application?<br>
In a user role I personally never look at a YANG source, though, I look at the tree or HTML representation of YANG all the time; Thats is the YANG human interface for me.</p>
<p>And even in these human friendly formats you can&rsquo;t find all the answers; for example, looking at the YANG tree, how do you get the XML data sample of a given leaf? Thats what we will discover in this post.</p>]]></description></item><item><title>NETCONF console in a docker container</title><link>https://netdevops.me/2020/netconf-console-in-a-docker-container/</link><pubDate>Tue, 28 Jan 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/netconf-console-in-a-docker-container/</guid><description><![CDATA[<p>Its an engineers core ability to decompose a complex task in a set of a smaller, easy to understand and perform sub-tasks. Be it a feature-rich program that is decomposed to classes, functions and APIs or a huge business operation captured in steps in a <em>Methods Of Procedure</em> document.</p>
<p>In a network automation field where the configuration protocols such as NETCONF or gRPC are emerging, it is always needed to have a quick way to validate an <em>RPC</em> or <em>Notification</em> feature before implementing this in a code or a workflow.</p>
<p>This blog post is about a handy tool called <a href="https://pypi.org/project/netconf-console/" target="_blank" rel="noopener noreffer"><code>netconf-console</code></a> which allows you to interface with your network device using NETCONF quick and easy. And, of course, I packed it in a smallish container so you can enjoy it hassle-free on every docker-enabled host.</p>]]></description></item><item><title>Flask application in a production-ready container</title><link>https://netdevops.me/2017/flask-application-in-a-production-ready-container/</link><pubDate>Thu, 09 Nov 2017 12:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2017/flask-application-in-a-production-ready-container/</guid><description><![CDATA[<p>Flask documentation <a href="http://flask.pocoo.org/docs/0.12/deploying/#deployment-options" target="_blank" rel="noopener noreffer">is very clear</a> on where is the place for its built-in WSGI application server:</p>
<blockquote>
<p>While lightweight and easy to use, <strong>Flask’s built-in server is not suitable for production</strong> as it doesn’t scale well and by default serves only one request at a time.</p>
</blockquote>
<p>So how about I share with you a <a href="https://github.com/hellt/nginx-uwsgi-flask-alpine-docker" target="_blank" rel="noopener noreffer"><em>Dockerfile</em></a> that will enable your Flask application to run <strong>properly</strong> and ready for production-like deployments? As a bonus, I will share my findings discovered along the way of building this container image.</p>
<p>




</p>]]></description></item><item><title>Yang Explorer in a docker container based on Alpine</title><link>https://netdevops.me/2017/yang-explorer-in-a-docker-container-based-on-alpine/</link><pubDate>Thu, 10 Aug 2017 12:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2017/yang-explorer-in-a-docker-container-based-on-alpine/</guid><description><![CDATA[<p>I wrote about the Yang Explorer in a docker quite some time ago, Yang Explorer was v0.6 at that time. Back then the motivation to create a docker image was pretty simple &ndash; installation was a pain in <strong>v0.6</strong>, it is still a pain, but the official version bumped to <strong>0.8(beta)</strong>.</p>
<p>So I decided to re-build <a href="https://hub.docker.com/r/hellt/yangexplorer-docker/" target="_blank" rel="noopener noreffer">an image</a>, now using Alpine Linux as a base image to reduce the size.</p>]]></description></item></channel></rss>