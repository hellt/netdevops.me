<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>uWSGI - Tag - NetDevOps</title><link>https://netdevops.me/tags/uwsgi/</link><description>uWSGI - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 09 Nov 2017 12:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/uwsgi/" rel="self" type="application/rss+xml"/><item><title>Flask application in a production-ready container</title><link>https://netdevops.me/2017/flask-application-in-a-production-ready-container/</link><pubDate>Thu, 09 Nov 2017 12:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2017/flask-application-in-a-production-ready-container/</guid><description><![CDATA[<p>Flask documentation <a href="http://flask.pocoo.org/docs/0.12/deploying/#deployment-options" target="_blank" rel="noopener noreffer">is very clear</a> on where is the place for its built-in WSGI application server:</p>
<blockquote>
<p>While lightweight and easy to use, <strong>Flask’s built-in server is not suitable for production</strong> as it doesn’t scale well and by default serves only one request at a time.</p>
</blockquote>
<p>So how about I share with you a <a href="https://github.com/hellt/nginx-uwsgi-flask-alpine-docker" target="_blank" rel="noopener noreffer"><em>Dockerfile</em></a> that will enable your Flask application to run <strong>properly</strong> and ready for production-like deployments? As a bonus, I will share my findings discovered along the way of building this container image.</p>
<p>




</p>]]></description></item></channel></rss>