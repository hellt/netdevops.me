<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>bootstrap - Tag - NetDevOps</title><link>https://netdevops.me/tags/bootstrap/</link><description>bootstrap - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 28 Jul 2019 09:00:07 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/bootstrap/" rel="self" type="application/rss+xml"/><item><title>Creating a Bootstrap based front-end for your simple REST service</title><link>https://netdevops.me/2019/creating-a-bootstrap-based-front-end-for-your-simple-rest-service/</link><pubDate>Sun, 28 Jul 2019 09:00:07 +0000</pubDate><author>Roman Dodin</author><guid>https://netdevops.me/2019/creating-a-bootstrap-based-front-end-for-your-simple-rest-service/</guid><description><![CDATA[<p>Not a single day goes by without me regretting I haven&rsquo;t mastered any front-end technology like React/Angular or the likes.  Why would a network engineer want to step into the game that seems orthogonal to its main area of expertise, one might ask?</p>
<p>Truth be told, I wasn&rsquo;t born with an urge to learn anything that has <em>javascript</em> under the hood, but over the years, working within the network/backend silos, I realized, that being able to create a simple front-end service is a jewel that fits every crown, no matter what title you wear.</p>
<p>This tutorial is based on the task real task of building up a web interface (<a href="https://pycatjify.netdevops.me" target="_blank" rel="noopener noreffer">pycatjify.netdevops.me</a>) for the <a href="../creating-google-cloud-platform-function-with-python-and-serverless/" rel=""><code>pycatjify</code></a> REST API service deployed as a serverless function. The end result is a <strong>simple</strong>, completely <strong>free</strong> and <strong>reusable</strong> Bootstrap based front-end boilerplate which can be used as a foundation for a similar task.</p>]]></description></item><item><title>Building Web front end for Python scripts with Flask</title><link>https://netdevops.me/2016/04/building-web-front-end-for-python-scripts-with-flask/</link><pubDate>Fri, 01 Apr 2016 04:22:27 +0000</pubDate><author>Roman Dodin</author><guid>https://netdevops.me/2016/04/building-web-front-end-for-python-scripts-with-flask/</guid><description><![CDATA[<p>Recently I revived my relationship with Python in an effort to tackle the routine tasks appearing here and there. So I started to write some <em>pocket scripts</em> and, luckily, was not the only one on this battlefield - my colleagues also have a bunch of useful scripts. With all those code snippets sent in the emails, cloned from the repos, grabbed on the network shares&hellip; I started to wonder how much easier would it be if someone had them all aggregated and presented with a Web UI for a shared access?</p>
<p>Thus, I started to build web front-end to the python scripts we used daily with these goals in mind:</p>
<ul>
<li>allow people with a zero knowledge of Python to use the scripts by interacting with them through a simple Web UI;</li>
<li>make script&rsquo;s output more readable by leveraging CSS and HTML formatting;</li>
<li>aggregate all the scripts in one a single repo but in a separate sandboxed directories to maintain code manageability.</li>
</ul>
<p>This short demo should give you some taste of what it is:</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/KzOFlFYucvM" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><strong>Disclaimer:</strong> I am nowhere near even a professional python or web developer. And what makes it even worse is that I used (a lot) a very dangerous coding paradigm - SDD - Stack Overflow Driven Development. So, hurt me plenty if you see some awful mistakes.</p>
<p><a href="https://github.com/hellt/PLAZA" target="_blank" rel="noopener noreffer">Project source code</a></p>]]></description></item></channel></rss>