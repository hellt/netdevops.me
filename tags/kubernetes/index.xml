<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>kubernetes - Tag - NetDevOps</title><link>https://netdevops.me/tags/kubernetes/</link><description>kubernetes - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 17 Aug 2021 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/kubernetes/" rel="self" type="application/rss+xml"/><item><title>Using scrapligo with kubectl exec</title><link>https://netdevops.me/2021/using-scrapligo-with-kubectl-exec/</link><pubDate>Tue, 17 Aug 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/using-scrapligo-with-kubectl-exec/</guid><description>As the networking industry is (slowly) moving towards forklifting networking functions to the cloud-native space we often become the witnesses of mixing decade old tools with cloud-native approaches and architectures.
This post is about one such crazy mixture of using screen scraping library scrapligo with kubectl exec and docker exec commands.
What and Why?I can imagine that for some readers the previous sentence makes no sense, why do you need a screen scraping library when working with standalone containers or kubernetes workloads?</description></item></channel></rss>