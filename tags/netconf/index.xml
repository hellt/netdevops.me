<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Netconf - Tag - NetDevOps</title><link>https://netdevops.me/tags/netconf/</link><description>Netconf - Tag - NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 03 Jul 2020 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/tags/netconf/" rel="self" type="application/rss+xml"/><item><title>NETCONF subtree filtering by example</title><link>https://netdevops.me/2020/netconf-subtree-filtering-by-example/</link><pubDate>Fri, 03 Jul 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/netconf-subtree-filtering-by-example/</guid><description><![CDATA[<p>If you pick a random NetEng and ask them if they love NETCONF they would likely say &ldquo;Nah&rdquo;. The <del>hate-hate</del> love-hate kind of relationship with NETCONF mostly roots in its XML layer that one can&rsquo;t swap out. But if we set the XML-related challenges aside, it will become clear that NETCONF is a very well designed management interface with lots of capabilities.</p>
<p>In this topic we will touch on the NETCONF&rsquo;s subtree filtering capabilities.</p>]]></description></item><item><title>Easily exposing your local resources with ngrok and fwd</title><link>https://netdevops.me/2020/easily-exposing-your-local-resources-with-ngrok-and-fwd/</link><pubDate>Sat, 25 Apr 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/easily-exposing-your-local-resources-with-ngrok-and-fwd/</guid><description><![CDATA[<p>I bet every one of you was in a situation when you bloody needed to expose some local resource over internet. Letting a remote colleague to look at your work, delivering a demo being off-VPN, or any other reason to have your service be reachable over Internet.</p>
<p>And it was never easy; corporate firewalls stand on-guard ensuring you can&rsquo;t be agile and productive ðŸ˜‰</p>
<p>In this post I&rsquo;ll share with you how I glue <a href="https://ngrok.io" target="_blank" rel="noopener noreffer"><code>ngrok</code></a> and <a href="https://github.com/kintoandar/fwd" target="_blank" rel="noopener noreffer"><code>fwd</code></a> tools together to make my routers management interfaces exposed over Internet in a few clicks for free.</p>]]></description></item><item><title>Getting XML data sample for a given leaf in a YANG model</title><link>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</link><pubDate>Sat, 01 Feb 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/getting-xml-data-sample-for-a-given-leaf-in-a-yang-model/</guid><description><![CDATA[<p>We can praise YANG as long as we want, but for an end user YANG is useful as the tooling around it and the applications leveraging it. Ask yourself, as a user of any kind of NETCONF/YANG application what was the last time you looked at a <code>*.yang</code> file content and found something that was needed to consume that application?<br>
In a user role I personally never look at a YANG source, though, I look at the tree or HTML representation of YANG all the time; Thats is the YANG human interface for me.</p>
<p>And even in these human friendly formats you can&rsquo;t find all the answers; for example, looking at the YANG tree, how do you get the XML data sample of a given leaf? Thats what we will discover in this post.</p>]]></description></item><item><title>NETCONF console in a docker container</title><link>https://netdevops.me/2020/netconf-console-in-a-docker-container/</link><pubDate>Tue, 28 Jan 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/netconf-console-in-a-docker-container/</guid><description><![CDATA[<p>Its an engineers core ability to decompose a complex task in a set of a smaller, easy to understand and perform sub-tasks. Be it a feature-rich program that is decomposed to classes, functions and APIs or a huge business operation captured in steps in a <em>Methods Of Procedure</em> document.</p>
<p>In a network automation field where the configuration protocols such as NETCONF or gRPC are emerging, it is always needed to have a quick way to validate an <em>RPC</em> or <em>Notification</em> feature before implementing this in a code or a workflow.</p>
<p>This blog post is about a handy tool called <a href="https://pypi.org/project/netconf-console/" target="_blank" rel="noopener noreffer"><code>netconf-console</code></a> which allows you to interface with your network device using NETCONF quick and easy. And, of course, I packed it in a smallish container so you can enjoy it hassle-free on every docker-enabled host.</p>]]></description></item></channel></rss>