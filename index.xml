<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>NetDevOps</title><link>https://netdevops.me/</link><description>DevOps applied to networking</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 01 Apr 2021 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/index.xml" rel="self" type="application/rss+xml"/><item><title>Containerlab - your network-centric labs with a Docker UX</title><link>https://netdevops.me/2021/containerlab-your-network-centric-labs-with-a-docker-ux/</link><pubDate>Thu, 01 Apr 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/containerlab-your-network-centric-labs-with-a-docker-ux/</guid><description>With the growing number of containerized Network Operating Systems (NOS) grows the demand to easily run them in the user-defined, versatile lab topologies. Unfortunately, container runtimes alone and tools like docker-compose are not a particularly good fit for that purpose, as they do not allow a user to easily create p2p connections between the containers.
Containerlab provides a framework for orchestrating networking labs with containers. It starts the containers, builds a virtual wiring between them to create a topology of users choice and then manages a lab lifecycle.</description></item><item><title>Building and publishing deb/rpm packages with goreleaser and fury.io</title><link>https://netdevops.me/2021/building-and-publishing-deb/rpm-packages-with-goreleaser-and-fury.io/</link><pubDate>Tue, 23 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/building-and-publishing-deb/rpm-packages-with-goreleaser-and-fury.io/</guid><description>I am a huge fan of a goreleaser tool that enables users to build Go projects and package/publish build artifacts in a fully automated and highly customizable way. We&amp;rsquo;ve have been using goreleaser with all our recent projects and we couldn&amp;rsquo;t be any happier since then.
But once the artifacts are built and published, the next important step is to make them easily installable. Especially if you provide deb/rpm packages which are built with NFPM integration.</description></item><item><title>Transparently redirecting packets/frames between interfaces</title><link>https://netdevops.me/2021/transparently-redirecting-packets/frames-between-interfaces/</link><pubDate>Sat, 20 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/transparently-redirecting-packets/frames-between-interfaces/</guid><description>Lately I have been consumed by an idea of running container-based labs that span containerized NOSes, classical VM-based routers and regular containers with a single and uniform UX.
Luckily the foundation was already there. With plajjan/vrnetlab you get a toolchain that cleverly packages qemu-based VMs inside the container packaging, and with networkop/docker-topo you can run, deploy and wire containers in meshed topologies.
One particular thing though we needed to address, and it was the way we interconnect containers which host vrnetlab-created routers inside.</description></item><item><title>How to patch Ubuntu 20.04 Focal Fossa with UKSM?</title><link>https://netdevops.me/2021/how-to-patch-ubuntu-20.04-focal-fossa-with-uksm/</link><pubDate>Thu, 18 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/how-to-patch-ubuntu-20.04-focal-fossa-with-uksm/</guid><description>Running multiple VMs out of the same disk image is something we, network engineers, do quite often. A virtualized network usually consists of a few identical virtualized network elements that we interconnected with links making a topology.
In the example above we have 7 virtualized routers in total, although we used only two VM images to create this topology (virtualized Nokia router and it&amp;rsquo;s Juniper vMX counterpart). Each of this VMs require some memory to run, for the simplicity, lets say each VM requires 5GB of RAM.</description></item><item><title>Remove binaries and big files from git repo</title><link>https://netdevops.me/2021/remove-binaries-and-big-files-from-git-repo/</link><pubDate>Mon, 01 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/remove-binaries-and-big-files-from-git-repo/</guid><description><![CDATA[<p>You slice and dice your files in a git repo like a pro and accidentally commit a binary file. It happened to you as well, don&rsquo;t pretend it didn&rsquo;t.<br>
Sooner or later you recognizes this file shouldn&rsquo;t be there, it is clogging your git repo for no reason. OK, you delete the file and commit. But the repo size doesn&rsquo;t get any smaller. Hm&hellip;</p>]]></description></item><item><title>How I create documentation sites for my projects?</title><link>https://netdevops.me/2020/how-i-create-documentation-sites-for-my-projects/</link><pubDate>Fri, 30 Oct 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/how-i-create-documentation-sites-for-my-projects/</guid><description>I am a firm believer that documentation is an integral part of the project. A terse, twisted, incomplete or sometimes even missing documentation penalizes your projects success. At the same time clean, concise and comprehensive documentation is not only something worth being proud of, but an opening to a users' appreciation and fame.
I am sharing the way I build, publish and host documentation sites for my projects via this live-example site - projectdocs.</description></item><item><title>gNMIc got better with YANG-completions</title><link>https://netdevops.me/2020/gnmic-got-better-with-yang-completions/</link><pubDate>Thu, 22 Oct 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/gnmic-got-better-with-yang-completions/</guid><description><![CDATA[<p><a href="https://gnmic.kmrd.dev" target="_blank" rel="noopener noreffer"><code>gnmic</code></a> was the first opensource project that I&rsquo;ve been part of that got widely adopted. As the maintainers of a public project, Karim and I were wondering when would we get the first external contribution.</p>
<p>To our surprise, the very <a href="https://github.com/karimra/gnmic/pull/136" target="_blank" rel="noopener noreffer">first external contribution</a> laid out the foundation to one of the most exciting features of <code>gnmic</code> - YANG-Completions.</p>]]></description></item><item><title>Arista vEOS gNMI Tutorial</title><link>https://netdevops.me/2020/arista-veos-gnmi-tutorial/</link><pubDate>Sat, 25 Jul 2020 07:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/arista-veos-gnmi-tutorial/</guid><description><![CDATA[<p>We were pleasantly surprised by the way community appreciated <a href="https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/" target="_blank" rel="noopener noreffer">gNMIc</a> release. Thank you üôè! That solidifies the fact that a well-formed, documented and easy to use gNMI tool was needed.</p>
<p>Now with gNMIc available to everybody its easy like never before to test gNMI implementation of different routing OSes. And in this post we will get our hands on <strong>Arista vEOS</strong>.</p>]]></description></item><item><title>gNMIc - gNMI CLI client and collector</title><link>https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/</link><pubDate>Wed, 08 Jul 2020 07:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/gnmic-gnmi-cli-client-and-collector/</guid><description><![CDATA[<p>Despite the fact that <a href="https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-specification.md" target="_blank" rel="noopener noreffer">gNMI</a> is defacto the go-to interface for a model-driven telemetry collection, we, as a community, had no gNMI tool that was easy to install, pleasure to use, documented and pre-built for common platforms. Until now.</p>
<p>I am excited to announce the public release of <a href="https://gnmic.kmrd.dev/" target="_blank" rel="noopener noreffer"><code>gnmic</code></a> - a CLI client and a collector that talks gNMI to your devices.</p>]]></description></item><item><title>NETCONF subtree filtering by example</title><link>https://netdevops.me/2020/netconf-subtree-filtering-by-example/</link><pubDate>Fri, 03 Jul 2020 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2020/netconf-subtree-filtering-by-example/</guid><description><![CDATA[<p>If you pick a random NetEng and ask them if they love NETCONF they would likely say &ldquo;Nah&rdquo;. The <del>hate-hate</del> love-hate kind of relationship with NETCONF mostly roots in its XML layer that one can&rsquo;t swap out. But if we set the XML-related challenges aside, it will become clear that NETCONF is a very well designed management interface with lots of capabilities.</p>
<p>In this topic we will touch on the NETCONF&rsquo;s subtree filtering capabilities.</p>]]></description></item></channel></rss>