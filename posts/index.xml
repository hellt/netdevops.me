<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>All Posts - NetDevOps</title><link>https://netdevops.me/posts/</link><description>All Posts | NetDevOps</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 22 Feb 2022 06:00:00 +0000</lastBuildDate><atom:link href="https://netdevops.me/posts/" rel="self" type="application/rss+xml"/><item><title>Using guestfish container image</title><link>https://netdevops.me/2022/using-guestfish-container-image/</link><pubDate>Tue, 22 Feb 2022 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2022/using-guestfish-container-image/</guid><description>Once in a while, one still needs to get down to a VM-land and dust off some guestfish skills.
Like today I got the IPInfusion OcNOS qcow2 image whose devs decided it is best to use VNC console by default. VNC console for a text-based terminal&amp;hellip;
So along come guestfish commands.
It is hugely satisfying to modify the VM images using containers, so here are my two commands to modify GRUB settings.</description></item><item><title>DIY YANG Browser</title><link>https://netdevops.me/2022/diy-yang-browser/</link><pubDate>Wed, 26 Jan 2022 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2022/diy-yang-browser/</guid><description>Here comes the second episode of the NetRel show: NetRel episode 002 - DIY YANG Browser. Be ready to dive into the paths we took to create a YANG Browser for Nokia SR Linux platform.
YANG data models are the map one should use when looking for their way to configure or retrieve any data on SR Linux system. A central role that is given to YANG in SR Linux demands a convenient interface to browse, search through, and process these data models.</description></item><item><title>Decoding gNMI with Wireshark</title><link>https://netdevops.me/2022/decoding-gnmi-with-wireshark/</link><pubDate>Tue, 18 Jan 2022 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2022/decoding-gnmi-with-wireshark/</guid><description>Okay, here goes my first attempt fitting the shoes of a content creator.
Please welcome the NetRel episode 001 - Decoding gNMI with Wireshark, it is a 35min journey of using Wireshark to parse the gNMI traffic (both non-secured and secured).
I won&amp;rsquo;t spend your time explaining the first episode; instead, let me tell you what I want the NetRel series to be about. I am interested in covering the aspects of network automation that are not widely covered.</description></item><item><title>Using scrapligo with kubectl exec</title><link>https://netdevops.me/2021/using-scrapligo-with-kubectl-exec/</link><pubDate>Tue, 17 Aug 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/using-scrapligo-with-kubectl-exec/</guid><description>As the networking industry is (slowly) moving towards forklifting networking functions to the cloud-native space we often become the witnesses of mixing decade old tools with cloud-native approaches and architectures.
This post is about one such crazy mixture of using screen scraping library scrapligo with kubectl exec and docker exec commands.
What and Why?I can imagine that for some readers the previous sentence makes no sense, why do you need a screen scraping library when working with standalone containers or kubernetes workloads?</description></item><item><title>Nokia SR Linux goes public!</title><link>https://netdevops.me/2021/nokia-sr-linux-goes-public/</link><pubDate>Wed, 21 Jul 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/nokia-sr-linux-goes-public/</guid><description>It&amp;rsquo;s been almost two years since Nokia announced its Data Center Fabric solution. The three-layered solution ranged from hardware platforms all the way up in the stack to the DC fabric lifecycle management suite - Fabric Services System (FSS).
At the very heart of the DC Fabric solution lies a purpose-built, modern Network OS - SR Linux.
SR Linux comes with quite some interesting and innovative ideas. By being able to design the NOS from the ground up, the product team was freed from the legacy burdens which will be there have they decided to built the NOS on top of the existing one.</description></item><item><title>Network automation options in Go with scrapligo</title><link>https://netdevops.me/2021/network-automation-options-in-go-with-scrapligo/</link><pubDate>Wed, 09 Jun 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/network-automation-options-in-go-with-scrapligo/</guid><description>Just recently the network automation folks witnessed a great library to be ported from Python to Go - scrapligo.
Been working on learning go a bit and have published scrapligo https://t.co/NDXQ6khxCr -- still a work in progress, but has been a fun learning experience! Check it out and let me know what ya think! ðŸ¤ 
&amp;mdash; Carl Montanari (@carlrmontanari) May 19, 2021 For me personally this was a pivotal point because with scrapligo the Go-minded netengs can now automate their networks with a solid and performant library.</description></item><item><title>Containerlab - your network-centric labs with a Docker UX</title><link>https://netdevops.me/2021/containerlab-your-network-centric-labs-with-a-docker-ux/</link><pubDate>Thu, 01 Apr 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/containerlab-your-network-centric-labs-with-a-docker-ux/</guid><description>With the growing number of containerized Network Operating Systems (NOS) grows the demand to easily run them in the user-defined, versatile lab topologies. Unfortunately, container runtimes alone and tools like docker-compose are not a particularly good fit for that purpose, as they do not allow a user to easily create p2p connections between the containers.
Containerlab provides a framework for orchestrating networking labs with containers. It starts the containers, builds a virtual wiring between them to create a topology of users choice and then manages a lab lifecycle.</description></item><item><title>Building and publishing deb/rpm packages with goreleaser and gemfury</title><link>https://netdevops.me/2021/building-and-publishing-deb/rpm-packages-with-goreleaser-and-gemfury/</link><pubDate>Tue, 23 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/building-and-publishing-deb/rpm-packages-with-goreleaser-and-gemfury/</guid><description>I am a huge fan of a goreleaser tool that enables users to build Go projects and package/publish build artifacts in a fully automated and highly customizable way. We&amp;rsquo;ve have been using goreleaser with all our recent projects and we couldn&amp;rsquo;t be any happier since then.
But once the artifacts are built and published, the next important step is to make them easily installable. Especially if you provide deb/rpm packages which are built with NFPM integration.</description></item><item><title>Transparently redirecting packets/frames between interfaces</title><link>https://netdevops.me/2021/transparently-redirecting-packets/frames-between-interfaces/</link><pubDate>Sat, 20 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/transparently-redirecting-packets/frames-between-interfaces/</guid><description>Lately I have been consumed by an idea of running container-based labs that span containerized NOSes, classical VM-based routers and regular containers with a single and uniform UX.
Luckily the foundation was already there. With plajjan/vrnetlab you get a toolchain that cleverly packages qemu-based VMs inside the container packaging, and with networkop/docker-topo you can run, deploy and wire containers in meshed topologies.
One particular thing though we needed to address, and it was the way we interconnect containers which host vrnetlab-created routers inside.</description></item><item><title>How to patch Ubuntu 20.04 Focal Fossa with UKSM?</title><link>https://netdevops.me/2021/how-to-patch-ubuntu-20.04-focal-fossa-with-uksm/</link><pubDate>Thu, 18 Feb 2021 06:00:00 +0000</pubDate><author>Author</author><guid>https://netdevops.me/2021/how-to-patch-ubuntu-20.04-focal-fossa-with-uksm/</guid><description>Running multiple VMs out of the same disk image is something we, network engineers, do quite often. A virtualized network usually consists of a few identical virtualized network elements that we interconnected with links making a topology.
In the example above we have 7 virtualized routers in total, although we used only two VM images to create this topology (virtualized Nokia router and it&amp;rsquo;s Juniper vMX counterpart). Each of this VMs require some memory to run, for the simplicity, lets say each VM requires 5GB of RAM.</description></item></channel></rss>